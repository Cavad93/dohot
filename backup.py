#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö DoHot

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python backup.py                    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    python backup.py --restore backup.db # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏
    python backup.py --list             # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π
    python backup.py --cleanup          # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏
"""

import argparse
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from utils import BackupManager, DatabaseValidator
from logger_config import setup_logger

logger = setup_logger("backup")


def create_backup(backup_manager: BackupManager) -> bool:
    """
    –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    
    Args:
        backup_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        
    Returns:
        True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    """
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    backup_path = backup_manager.create_backup()
    
    if backup_path:
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        size_mb = os.path.getsize(backup_path) / (1024 * 1024)
        print(f"üì¶ –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
        
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        return False


def restore_backup(backup_manager: BackupManager, backup_path: str) -> bool:
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    
    Args:
        backup_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        backup_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        
    Returns:
        True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    """
    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ {backup_path}...")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("‚ö†Ô∏è  –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return False
    
    success = backup_manager.restore_backup(backup_path)
    
    if success:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        validator = DatabaseValidator()
        if validator.check_integrity():
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏")
        return False


def list_backups(backup_manager: BackupManager):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    
    Args:
        backup_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    """
    backups = backup_manager.list_backups()
    
    if not backups:
        print("üì≠ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}\n")
    print(f"{'‚Ññ':<4} {'–ò–º—è —Ñ–∞–π–ª–∞':<35} {'–†–∞–∑–º–µ—Ä':<10} {'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è':<20}")
    print("-" * 70)
    
    for i, backup in enumerate(backups, 1):
        size_mb = backup['size'] / (1024 * 1024)
        created = backup['created'].strftime("%Y-%m-%d %H:%M:%S")
        print(f"{i:<4} {backup['filename']:<35} {size_mb:>6.2f} MB {created:<20}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
    total_size = sum(b['size'] for b in backups) / (1024 * 1024)
    print("-" * 70)
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.2f} MB")


def cleanup_old_backups(backup_manager: BackupManager, keep_count: int = 10):
    """
    –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    
    Args:
        backup_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        keep_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    backups = backup_manager.list_backups()
    
    if len(backups) <= keep_count:
        print(f"‚úÖ –í—Å–µ–≥–æ {len(backups)} –∫–æ–ø–∏–π, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return
    
    to_delete_count = len(backups) - keep_count
    print(f"üóëÔ∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {to_delete_count} —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π (–æ—Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {keep_count})")
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    backup_manager.cleanup_old_backups(keep_count)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {to_delete_count} —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π")


def check_database(validator: DatabaseValidator):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        validator: –í–∞–ª–∏–¥–∞—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    print("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
    if validator.check_integrity():
        print("   ‚úÖ OK")
    else:
        print("   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    print("\n2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...")
    tables = validator.check_tables()
    for table, exists in tables.items():
        status = "‚úÖ" if exists else "‚ùå"
        print(f"   {status} {table}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n3Ô∏è‚É£  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    stats = validator.get_database_stats()
    
    if 'size_mb' in stats:
        print(f"   üì¶ –†–∞–∑–º–µ—Ä: {stats['size_mb']:.2f} MB")
    
    if 'total_users' in stats:
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
    
    if 'credits_count' in stats:
        print(f"   üí≥ –ö—Ä–µ–¥–∏—Ç–æ–≤: {stats['credits_count']}")
    
    if 'debts_count' in stats:
        print(f"   üí∏ –î–æ–ª–≥–æ–≤: {stats['debts_count']}")
    
    if 'incomes_count' in stats:
        print(f"   üí∞ –ó–∞–ø–∏—Å–µ–π –¥–æ—Ö–æ–¥–æ–≤: {stats['incomes_count']}")
    
    if 'expenses_count' in stats:
        print(f"   üõí –ó–∞–ø–∏—Å–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {stats['expenses_count']}")
    
    if 'investments_count' in stats:
        print(f"   üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {stats['investments_count']}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–£—Ç–∏–ª–∏—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è DoHot",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python backup.py                               # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  python backup.py --restore backups/backup.db   # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏
  python backup.py --list                        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π
  python backup.py --cleanup --keep 5            # –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–ø–∏–π
  python backup.py --check                       # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        """
    )
    
    parser.add_argument(
        '--db',
        default='dohot.db',
        help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: dohot.db)'
    )
    
    parser.add_argument(
        '--backup-dir',
        default='backups',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: backups)'
    )
    
    parser.add_argument(
        '--restore',
        metavar='BACKUP_FILE',
        help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
    )
    
    parser.add_argument(
        '--list',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π'
    )
    
    parser.add_argument(
        '--cleanup',
        action='store_true',
        help='–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏'
    )
    
    parser.add_argument(
        '--keep',
        type=int,
        default=10,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
    )
    
    parser.add_argument(
        '--check',
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    backup_manager = BackupManager(args.db, args.backup_dir)
    validator = DatabaseValidator(args.db)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if args.restore:
        success = restore_backup(backup_manager, args.restore)
        sys.exit(0 if success else 1)
    
    elif args.list:
        list_backups(backup_manager)
        sys.exit(0)
    
    elif args.cleanup:
        cleanup_old_backups(backup_manager, args.keep)
        sys.exit(0)
    
    elif args.check:
        check_database(validator)
        sys.exit(0)
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        success = create_backup(backup_manager)
        sys.exit(0 if success else 1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"Backup script error: {e}", exc_info=True)
        sys.exit(1)
