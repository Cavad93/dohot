import asyncio
import logging
from datetime import datetime, date
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from database import Database
from calculations import FinancialCalculator
from visualization import ChartGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = Database()
scheduler = AsyncIOScheduler()
chart_gen = ChartGenerator()


# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================

class CreditStates(StatesGroup):
    waiting_bank_name = State()
    waiting_monthly_payment = State()
    waiting_total_months = State()
    waiting_interest_rate = State()
    waiting_remaining_debt = State()
    waiting_start_date = State()
    
    selecting_credit = State()
    entering_payment_amount = State()
    
    selecting_credit_for_early = State()
    entering_early_amount = State()
    selecting_early_type = State()
    
    selecting_credit_for_capabilities = State()
    selecting_capability = State()


class CreditCardStates(StatesGroup):
    waiting_card_name = State()
    waiting_bank_name = State()
    waiting_credit_limit = State()
    waiting_interest_rate = State()
    waiting_minimum_payment_percent = State()
    
    selecting_card_for_transaction = State()
    waiting_transaction_amount = State()
    waiting_transaction_notes = State()
    
    selecting_card_for_spending = State()
    waiting_spending_amount = State()
    waiting_spending_notes = State()


class DebtStates(StatesGroup):
    waiting_person_name = State()
    waiting_amount = State()
    waiting_type = State()
    waiting_description = State()
    
    # –î–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
    selecting_debt_for_payment = State()


class CategoryStates(StatesGroup):
    waiting_name = State()
    waiting_type = State()


class IncomeStates(StatesGroup):
    waiting_amount = State()
    selecting_category = State()
    waiting_description = State()
    waiting_delete_id = State()

class ExpenseStates(StatesGroup):
    waiting_amount = State()
    selecting_category = State()
    waiting_description = State()
    waiting_delete_id = State()



class InvestmentStates(StatesGroup):
    waiting_asset_name = State()
    waiting_invested_amount = State()
    
    # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    selecting_investment = State()
    waiting_new_value = State()


class SavingsStates(StatesGroup):
    waiting_amount = State()


class BudgetStates(StatesGroup):
    selecting_month = State()
    waiting_planned_income = State()
    waiting_planned_expenses = State()
    editing_credit_expenses = State()
    waiting_custom_expense_name = State()
    waiting_custom_expense_amount = State()
    waiting_notes = State()
    viewing_budget = State()
    selecting_budget_to_edit = State()
    
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    selecting_income_categories = State()
    waiting_income_category_amount = State()
    selecting_expense_categories = State()
    waiting_expense_category_amount = State()
    editing_single_category = State()
    waiting_edited_category_amount = State()


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def get_main_menu_keyboard():
    keyboard = [
        [KeyboardButton(text="üí≥ –ö—Ä–µ–¥–∏—Ç—ã"), KeyboardButton(text="üí∏ –î–æ–ª–≥–∏")],
        [KeyboardButton(text="üí∞ –î–æ—Ö–æ–¥—ã"), KeyboardButton(text="üõí –†–∞—Å—Ö–æ–¥—ã")],
        [KeyboardButton(text="üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"), KeyboardButton(text="üè¶ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è")],
        [KeyboardButton(text="üìÖ –ë—é–¥–∂–µ—Ç"), KeyboardButton(text="üìã –û—Ç—á—ë—Ç")],
        [KeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ø–∏—Ç–∞–ª–∞"), KeyboardButton(text="‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_credit_menu_keyboard():
    keyboard = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")],
        [KeyboardButton(text="üìã –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã"), KeyboardButton(text="üí≥ –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂")],
        [KeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"), KeyboardButton(text="‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤")],
        [KeyboardButton(text="üí∞ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ")],
        [KeyboardButton(text="üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_credit_card_menu_keyboard():
    keyboard = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üìã –ú–æ–∏ –∫–∞—Ä—Ç—ã")],
        [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton(text="üõí –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å")],
        [KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")],
        [KeyboardButton(text="‚óÄÔ∏è –ö –∫—Ä–µ–¥–∏—Ç–∞–º"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_debt_menu_keyboard():
    keyboard = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥")],
        [KeyboardButton(text="üìã –ú–æ–∏ –¥–æ–ª–≥–∏")],
        [KeyboardButton(text="‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_income_expense_keyboard(income: bool = True):
    text = "–¥–æ—Ö–æ–¥" if income else "—Ä–∞—Å—Ö–æ–¥"
    plural = "–¥–æ—Ö–æ–¥—ã" if income else "—Ä–∞—Å—Ö–æ–¥—ã"
    keyboard = [
        [KeyboardButton(text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {text}")],
        [KeyboardButton(text=f"üìã –ú–æ–∏ {plural}")],
        [KeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π {text}")],
        [KeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {text} –ø–æ ID")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)



def get_investment_menu_keyboard():
    keyboard = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é")],
        [KeyboardButton(text="üìã –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")],
        [KeyboardButton(text="üíπ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_cancel_keyboard():
    keyboard = [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_budget_menu_keyboard():
    keyboard = [
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç")],
        [KeyboardButton(text="üìã –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã")],
        [KeyboardButton(text="üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    user = message.from_user
    db.add_user(user.id, user.username, user.first_name)
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –¥–æ–º–∞—à–Ω—é—é –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—é:\n"
        "‚Ä¢ –£—á—ë—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∏—Ö –ø–æ–≥–∞—à–µ–Ω–∏–µ\n"
        "‚Ä¢ –£—á—ë—Ç –¥–æ–ª–≥–æ–≤ (–≤–∑—è—Ç—ã—Ö –∏ –≤—ã–¥–∞–Ω–Ω—ã—Ö)\n"
        "‚Ä¢ –£—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ –£—á—ë—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
        "‚Ä¢ –£—á—ë—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ä–æ—á–Ω–æ–º—É –ø–æ–≥–∞—à–µ–Ω–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard()
    )


async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É DoHot\n\n"
        "üí≥ –ö–†–ï–î–ò–¢–´:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö\n"
        "‚Ä¢ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ (–ø–æ–ª–Ω–æ–µ/—á–∞—Å—Ç–∏—á–Ω–æ–µ)\n"
        "‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –ø–æ–≥–∞—à–µ–Ω–∏—é\n\n"
        
        "üí∏ –î–û–õ–ì–ò:\n"
        "‚Ä¢ –£—á—ë—Ç –¥–æ–ª–≥–æ–≤ –≤–∑—è—Ç—ã—Ö/–≤—ã–¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ë–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\n\n"
        
        "üí∞ –î–û–•–û–î–´ –ò –†–ê–°–•–û–î–´:\n"
        "‚Ä¢ –£—á—ë—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        
        "üìä –ò–ù–í–ï–°–¢–ò–¶–ò–ò:\n"
        "‚Ä¢ –£—á—ë—Ç –∞–∫—Ç–∏–≤–æ–≤\n"
        "‚Ä¢ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n\n"
        
        "üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê:\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —á–∏—Å—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
        
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ ====================

async def handle_main_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.clear()
    
    if message.text == "üí≥ –ö—Ä–µ–¥–∏—Ç—ã":
        await message.answer(
            "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞–º–∏\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            "‚Ä¢ –í–Ω–µ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–ª–∞—Ç—ë–∂\n"
            "‚Ä¢ –°–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∞",
            reply_markup=get_credit_menu_keyboard()
        )
    
    elif message.text == "üí∏ –î–æ–ª–≥–∏":
        await message.answer(
            "üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏\n\n"
            "–£—á—ë—Ç –¥–æ–ª–≥–æ–≤ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:\n"
            "‚Ä¢ –í–∑—è—Ç—ã—Ö —É –ª—é–¥–µ–π\n"
            "‚Ä¢ –í—ã–¥–∞–Ω–Ω—ã—Ö –ª—é–¥—è–º",
            reply_markup=get_debt_menu_keyboard()
        )
    
    elif message.text == "üí∞ –î–æ—Ö–æ–¥—ã":
        await message.answer(
            "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞–º–∏",
            reply_markup=get_income_expense_keyboard(income=True)
        )
    
    elif message.text == "üõí –†–∞—Å—Ö–æ–¥—ã":
        await message.answer(
            "üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏",
            reply_markup=get_income_expense_keyboard(income=False)
        )
    
    elif message.text == "üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
        await message.answer(
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏",
            reply_markup=get_investment_menu_keyboard()
        )
    
    elif message.text == "üè¶ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è":
        await message.answer(
            "üè¶ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(SavingsStates.waiting_amount)
    
    elif message.text == "üìà –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ø–∏—Ç–∞–ª–∞":
        await show_capital_chart(message)
    
    elif message.text == "üìã –û—Ç—á—ë—Ç":
        await show_financial_report(message)
    
    elif message.text == "üìÖ –ë—é–¥–∂–µ—Ç":
        await message.answer(
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—é–¥–∂–µ—Ç—ã\n"
            "‚Ä¢ –£–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Å —É—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_budget_menu_keyboard()
        )
    
    elif message.text == "‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await show_categories_menu(message)
    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥":
        await handlers.handle_delete_last_income(message)
    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥ –ø–æ ID":
        await handlers.handle_delete_income_by_id(message, state)
    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥":
        await handlers.handle_delete_last_expense(message)
    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –ø–æ ID":
        await handlers.handle_delete_expense_by_id(message, state)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–†–ï–î–ò–¢–û–í ====================

async def handle_add_credit(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreditStates.waiting_bank_name)


async def process_bank_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    await state.update_data(bank_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(CreditStates.waiting_monthly_payment)


async def process_monthly_payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        monthly_payment = float(message.text.replace(",", "."))
        await state.update_data(monthly_payment=monthly_payment)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö):")
        await state.set_state(CreditStates.waiting_total_months)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 15000.50")


async def process_total_months(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
    try:
        total_months = int(message.text)
        await state.update_data(total_months=total_months)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –≥–æ–¥–æ–≤—ã—Ö):")
        await state.set_state(CreditStates.waiting_interest_rate)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 36")


async def process_interest_rate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
    try:
        interest_rate = float(message.text.replace(",", "."))
        await state.update_data(interest_rate=interest_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ (–≤ —Ä—É–±–ª—è—Ö):")
        await state.set_state(CreditStates.waiting_remaining_debt)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5")


async def process_remaining_debt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞"""
    try:
        remaining_debt = float(message.text.replace(",", "."))
        await state.update_data(remaining_debt=remaining_debt)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—Ä–µ–¥–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É:"
        )
        await state.set_state(CreditStates.waiting_start_date)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500000")


async def process_start_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    data = await state.get_data()
    
    if message.text == "0":
        start_date = date.today().isoformat()
    else:
        try:
            start_date = datetime.strptime(message.text, "%d.%m.%Y").date().isoformat()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024")
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç –≤ –±–∞–∑—É
    credit_id = db.add_credit(
        user_id=message.from_user.id,
        bank_name=data['bank_name'],
        monthly_payment=data['monthly_payment'],
        total_months=data['total_months'],
        interest_rate=data['interest_rate'],
        remaining_debt=data['remaining_debt'],
        start_date=start_date
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ –ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üè¶ –ë–∞–Ω–∫: {data['bank_name']}\n"
        f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {data['monthly_payment']:,.2f} —Ä—É–±.\n"
        f"üìÖ –°—Ä–æ–∫: {data['total_months']} –º–µ—Å.\n"
        f"üìà –°—Ç–∞–≤–∫–∞: {data['interest_rate']}%\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {data['remaining_debt']:,.2f} —Ä—É–±.",
        reply_markup=get_credit_menu_keyboard()
    )


async def show_user_credits(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    credits = db.get_user_credits(message.from_user.id)
    
    if not credits:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç'",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    text = "üìã –í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:\n\n"
    
    for i, credit in enumerate(credits, 1):
        remaining = FinancialCalculator.calculate_remaining_months(credit)
        next_payment = FinancialCalculator.calculate_next_payment_date(credit)
        
        text += f"{i}. {credit['display_name']}\n"
        text += f"   üí∞ –û—Å—Ç–∞—Ç–æ–∫: {credit['remaining_debt']:,.2f} —Ä—É–±.\n"
        text += f"   üíµ –ü–ª–∞—Ç—ë–∂: {credit['monthly_payment']:,.2f} —Ä—É–±.\n"
        text += f"   üìà –°—Ç–∞–≤–∫–∞: {credit['interest_rate']}%\n"
        text += f"   ‚è± –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–µ—Å.\n"
        text += f"   üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂: {next_payment.strftime('%d.%m.%Y')}\n\n"
    
    await message.answer(text, reply_markup=get_credit_menu_keyboard())


async def handle_credit_payment(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    credits = db.get_user_credits(message.from_user.id)
    
    if not credits:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    keyboard = []
    for credit in credits:
        keyboard.append([InlineKeyboardButton(
            text=f"{credit['display_name']} ({credit['monthly_payment']:.2f} —Ä—É–±.)",
            callback_data=f"pay_credit_{credit['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditStates.selecting_credit_for_payment)


async def process_credit_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    credit_id = int(callback.data.split("_")[2])
    credit = db.get_credit_by_id(credit_id)
    
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_pay_{credit_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    await callback.message.edit_text(
        f"–í–Ω–µ—Å–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É:\n"
        f"üè¶ {credit['display_name']}\n"
        f"üíµ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {credit['monthly_payment']:,.2f} —Ä—É–±.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.update_data(credit_id=credit_id)
    await state.set_state(CreditStates.confirming_payment)


async def confirm_credit_payment(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    data = await state.get_data()
    credit_id = data['credit_id']
    credit = db.get_credit_by_id(credit_id)
    
    # –í–Ω–æ—Å–∏–º –ø–ª–∞—Ç—ë–∂
    db.add_credit_payment(
        credit_id=credit_id,
        amount=credit['monthly_payment'],
        payment_type='regular'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    credit = db.get_credit_by_id(credit_id)
    remaining = FinancialCalculator.calculate_remaining_months(credit)
    
    await callback.message.delete()
    await state.clear()
    
    if credit['is_active']:
        await callback.message.answer(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å—ë–Ω!\n\n"
            f"üè¶ {credit['display_name']}\n"
            f"üí∞ –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {credit['remaining_debt']:,.2f} —Ä—É–±.\n"
            f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—è—Ü–µ–≤: {remaining}",
            reply_markup=get_credit_menu_keyboard()
        )
    else:
        await callback.message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!\n\n"
            f"üè¶ {credit['display_name']}\n"
            f"–í—ã –∑–∞–∫—Ä—ã–ª–∏ —ç—Ç–æ—Ç –∫—Ä–µ–¥–∏—Ç!",
            reply_markup=get_credit_menu_keyboard()
        )


async def show_credit_recommendations(message: types.Message):
    """–ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–æ—Å—Ä–æ—á–Ω–æ–º—É –ø–æ–≥–∞—à–µ–Ω–∏—é"""
    credits = db.get_user_credits(message.from_user.id)
    
    if not credits:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    recommendation = FinancialCalculator.recommend_early_payment_strategy(credits)
    
    await message.answer(
        f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ä–æ—á–Ω–æ–º—É –ø–æ–≥–∞—à–µ–Ω–∏—é\n\n"
        f"{recommendation['explanation']}\n\n"
        f"{recommendation['payment_type_explanation']}",
        reply_markup=get_credit_menu_keyboard()
    )


# ==================== –û–¢–ß–Å–¢–´ –ò –ì–†–ê–§–ò–ö–ò ====================

async def show_capital_chart(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞"""
    user_id = message.from_user.id
    
    credits = db.get_user_credits(user_id)
    debts = db.get_user_debts(user_id)
    investments = db.get_user_investments(user_id)
    savings_data = db.get_latest_savings(user_id)
    
    savings = savings_data['amount'] if savings_data else 0
    
    net_worth = FinancialCalculator.calculate_net_worth(savings, credits, debts, investments)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart_path = chart_gen.generate_capital_chart(net_worth)
    
    if chart_path:
        photo = types.FSInputFile(chart_path)
        await message.answer_photo(
            photo=photo,
            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –≤–∞—à–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞\n\n"
                   f"–ß–∏—Å—Ç—ã–π –∫–∞–ø–∏—Ç–∞–ª: {net_worth['net_worth']:,.2f} —Ä—É–±.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞",
            reply_markup=get_main_menu_keyboard()
        )


async def show_financial_report(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    report = FinancialCalculator.generate_financial_report(message.from_user.id, db)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á—ë—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    max_length = 4000
    if len(report) > max_length:
        parts = [report[i:i+max_length] for i in range(0, len(report), max_length)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(report)
    
    await message.answer(
        "–ì–æ—Ç–æ–≤–æ!",
        reply_markup=get_main_menu_keyboard()
    )


# ==================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ====================

async def check_payment_reminders(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    conn = db.get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
    cursor.execute("""
        SELECT c.*, u.user_id 
        FROM credits c
        JOIN users u ON c.user_id = u.user_id
        WHERE c.is_active = 1
    """)
    
    columns = [description[0] for description in cursor.description]
    credits = [dict(zip(columns, row)) for row in cursor.fetchall()]
    conn.close()
    
    today = date.today()
    
    for credit in credits:
        next_payment = FinancialCalculator.calculate_next_payment_date(credit)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞
        if next_payment == today:
            try:
                await bot.send_message(
                    credit['user_id'],
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ!\n\n"
                    f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É:\n"
                    f"üè¶ {credit['display_name']}\n"
                    f"üíµ –°—É–º–º–∞: {credit['monthly_payment']:,.2f} —Ä—É–±.\n\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂ –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ –≤ –±–æ—Ç–µ!"
                )
            except Exception as e:
                logger.error(f"Error sending reminder to user {credit['user_id']}: {e}")


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

async def cancel_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_menu_keyboard()
    )


def get_categories_menu_keyboard():
    keyboard = [
        [KeyboardButton(text="‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞")],
        [KeyboardButton(text="‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def show_categories_menu(message: types.Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await message.answer(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=get_categories_menu_keyboard()
    )
