"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
"""

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot import CreditCardStates, get_credit_card_menu_keyboard, get_cancel_keyboard, get_main_menu_keyboard
from credit_cards import CreditCardManager
from database import Database

db = Database()
card_manager = CreditCardManager()


async def handle_credit_cards_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç"""
    await message.answer(
        "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞—Ä—Ç—ã —Å –ª–∏–º–∏—Ç–æ–º\n"
        "‚Ä¢ –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å",
        reply_markup=get_credit_card_menu_keyboard()
    )


async def handle_add_credit_card(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await message.answer(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: Momentum, All Airlines):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreditCardStates.waiting_card_name)


async def process_card_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_credit_card_handler(message, state)
        return
    
    await state.update_data(card_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(CreditCardStates.waiting_bank_name)


async def process_card_bank_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_credit_card_handler(message, state)
        return
    
    await state.update_data(bank_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(CreditCardStates.waiting_credit_limit)


async def process_card_credit_limit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_credit_card_handler(message, state)
        return
    
    try:
        credit_limit = float(message.text.replace(",", "."))
        await state.update_data(credit_limit=credit_limit)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19.9):")
        await state.set_state(CreditCardStates.waiting_interest_rate)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100000")


async def process_card_interest_rate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_credit_card_handler(message, state)
        return
    
    try:
        interest_rate = float(message.text.replace(",", "."))
        await state.update_data(interest_rate=interest_rate)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "(–æ–±—ã—á–Ω–æ 5-10%, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%):"
        )
        await state.set_state(CreditCardStates.waiting_minimum_payment_percent)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 19.9")


async def process_card_minimum_payment_percent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_credit_card_handler(message, state)
        return
    
    try:
        minimum_payment_percent = float(message.text.replace(",", "."))
        data = await state.get_data()
        
        card_id = card_manager.add_credit_card(
            user_id=message.from_user.id,
            card_name=data['card_name'],
            bank_name=data['bank_name'],
            credit_limit=data['credit_limit'],
            interest_rate=data['interest_rate'],
            minimum_payment_percent=minimum_payment_percent
        )
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üí≥ –ö–∞—Ä—Ç–∞: {data['card_name']}\n"
            f"üè¶ –ë–∞–Ω–∫: {data['bank_name']}\n"
            f"üí∞ –õ–∏–º–∏—Ç: {data['credit_limit']:,.2f} —Ä—É–±.\n"
            f"üìà –°—Ç–∞–≤–∫–∞: {data['interest_rate']}% –≥–æ–¥–æ–≤—ã—Ö\n"
            f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {minimum_payment_percent}% –æ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏",
            reply_markup=get_credit_card_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5")


async def show_user_credit_cards(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cards = card_manager.get_user_credit_cards(message.from_user.id)
    
    if not cards:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É'",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    text = "üí≥ –í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
    
    for i, card in enumerate(cards, 1):
        used_credit = card['credit_limit'] - card['current_balance']
        usage_percent = (used_credit / card['credit_limit']) * 100
        minimum_payment = card_manager.calculate_minimum_payment(card['id'])
        
        status_emoji = "üü¢" if used_credit == 0 else "üü°" if usage_percent < 50 else "üî¥"
        
        text += f"{i}. {status_emoji} {card['bank_name']} - {card['card_name']}\n"
        text += f"   –õ–∏–º–∏—Ç: {card['credit_limit']:,.0f} —Ä—É–±.\n"
        text += f"   –î–æ—Å—Ç—É–ø–Ω–æ: {card['current_balance']:,.0f} —Ä—É–±.\n"
        text += f"   –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {used_credit:,.0f} —Ä—É–±. ({usage_percent:.1f}%)\n"
        
        if used_credit > 0:
            text += f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {minimum_payment:,.2f} —Ä—É–±.\n"
        
        text += f"   –°—Ç–∞–≤–∫–∞: {card['interest_rate']}%\n\n"
    
    total_limit = sum(c['credit_limit'] for c in cards)
    total_available = sum(c['current_balance'] for c in cards)
    total_used = total_limit - total_available
    total_minimum = sum(card_manager.calculate_minimum_payment(c['id']) for c in cards)
    
    text += f"üìä –ò–¢–û–ì–û:\n"
    text += f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {total_limit:,.0f} —Ä—É–±.\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ: {total_available:,.0f} —Ä—É–±.\n"
    text += f"–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {total_used:,.0f} —Ä—É–±.\n"
    
    if total_minimum > 0:
        text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {total_minimum:,.2f} —Ä—É–±."
    
    await message.answer(text, reply_markup=get_credit_card_menu_keyboard())


async def handle_add_money_to_card(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    cards = card_manager.get_user_credit_cards(message.from_user.id)
    
    if not cards:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    keyboard = []
    for card in cards:
        used_credit = card['credit_limit'] - card['current_balance']
        if used_credit > 0:
            keyboard.append([InlineKeyboardButton(
                text=f"{card['bank_name']} - {card['card_name']} (–¥–æ–ª–≥: {used_credit:,.0f} ‚ÇΩ)",
                callback_data=f"repay_card_{card['id']}"
            )])
    
    if not keyboard:
        await message.answer(
            "–í—Å–µ –≤–∞—à–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ –∏–º–µ—é—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏!",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditCardStates.selecting_card_for_transaction)


async def process_card_selection_for_repayment(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    card_id = int(callback.data.split("_")[2])
    card = card_manager.get_card_by_id(card_id)
    await state.update_data(card_id=card_id)
    
    used_credit = card['credit_limit'] - card['current_balance']
    minimum_payment = card_manager.calculate_minimum_payment(card_id)
    
    await callback.message.delete()
    await callback.message.answer(
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n"
        f"üí≥ {card['bank_name']} - {card['card_name']}\n"
        f"üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {used_credit:,.2f} —Ä—É–±.\n"
        f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {minimum_payment:,.2f} —Ä—É–±.\n"
        f"üìà –°—Ç–∞–≤–∫–∞: {card['interest_rate']}% –≥–æ–¥–æ–≤—ã—Ö\n\n"
        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ß–∞—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–π–¥—ë—Ç –Ω–∞ –ø–æ–≥–∞—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreditCardStates.waiting_transaction_amount)


async def process_card_repayment_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_credit_card_handler(message, state)
        return
    
    try:
        amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        card_id = data['card_id']
        
        result = card_manager.add_money_to_card(card_id, amount)
        
        await state.clear()
        
        response = f"‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
        response += f"üí∞ –í–Ω–µ—Å–µ–Ω–æ: {result['amount_added']:,.2f} —Ä—É–±.\n"
        response += f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Å–ø–∏—Å–∞–Ω—ã: {result['interest_charged']:,.2f} —Ä—É–±.\n"
        response += f"üí≥ –ü–æ–≥–∞—à–µ–Ω–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {result['effective_repayment']:,.2f} —Ä—É–±.\n\n"
        response += f"üìä –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã:\n"
        response += f"   –ë—ã–ª–æ: {result['balance_before']:,.2f} —Ä—É–±.\n"
        response += f"   –°—Ç–∞–ª–æ: {result['balance_after']:,.2f} —Ä—É–±.\n\n"
        response += f"‚ú® –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {result['available_credit']:,.2f} —Ä—É–±.\n"
        
        if result['used_credit'] > 0:
            response += f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å: {result['used_credit']:,.2f} —Ä—É–±."
        else:
            response += f"üéâ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω–∞!"
        
        await message.answer(response, reply_markup=get_credit_card_menu_keyboard())
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5000")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_credit_card_menu_keyboard())
        await state.clear()


async def handle_spend_from_card(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞—Ç—ã —Å –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    cards = card_manager.get_user_credit_cards(message.from_user.id)
    
    if not cards:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    keyboard = []
    for card in cards:
        if card['current_balance'] > 0:
            keyboard.append([InlineKeyboardButton(
                text=f"{card['bank_name']} - {card['card_name']} (–¥–æ—Å—Ç—É–ø–Ω–æ: {card['current_balance']:,.0f} ‚ÇΩ)",
                callback_data=f"spend_card_{card['id']}"
            )])
    
    if not keyboard:
        await message.answer(
            "–ù–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç!",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditCardStates.selecting_card_for_spending)


async def process_card_selection_for_spending(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —Ç—Ä–∞—Ç—ã"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    card_id = int(callback.data.split("_")[2])
    card = card_manager.get_card_by_id(card_id)
    await state.update_data(card_id=card_id)
    
    await callback.message.delete()
    await callback.message.answer(
        f"–ü–æ–∫—É–ø–∫–∞ —Å –∫–∞—Ä—Ç—ã:\n"
        f"üí≥ {card['bank_name']} - {card['card_name']}\n"
        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {card['current_balance']:,.2f} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreditCardStates.waiting_spending_amount)


async def process_card_spending_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Ç—Ä–∞—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_credit_card_handler(message, state)
        return
    
    try:
        amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        card_id = data['card_id']
        
        result = card_manager.spend_from_card(card_id, amount)
        
        await state.clear()
        
        response = f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        response += f"üí≥ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {result['amount_spent']:,.2f} —Ä—É–±.\n\n"
        response += f"üìä –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã:\n"
        response += f"   –ë—ã–ª–æ: {result['balance_before']:,.2f} —Ä—É–±.\n"
        response += f"   –°—Ç–∞–ª–æ: {result['balance_after']:,.2f} —Ä—É–±.\n\n"
        response += f"‚ú® –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {result['available_credit']:,.2f} —Ä—É–±.\n"
        response += f"‚ö†Ô∏è –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {result['used_credit']:,.2f} —Ä—É–±."
        
        await message.answer(response, reply_markup=get_credit_card_menu_keyboard())
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_credit_card_menu_keyboard())
        await state.clear()


async def show_card_transactions(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞—Ä—Ç–∞–º"""
    cards = card_manager.get_user_credit_cards(message.from_user.id)
    
    if not cards:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç",
            reply_markup=get_credit_card_menu_keyboard()
        )
        return
    
    text = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –∫–∞—Ä—Ç–∞–º:\n\n"
    
    for card in cards:
        transactions = card_manager.get_card_transactions(card['id'], limit=10)
        
        if transactions:
            text += f"üí≥ {card['bank_name']} - {card['card_name']}\n"
            
            for trans in transactions[:5]:
                date_str = trans['transaction_date']
                trans_type = "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if trans['transaction_type'] == 'repayment' else "üõí –ü–æ–∫—É–ø–∫–∞"
                
                text += f"   {trans_type} {date_str}\n"
                text += f"   –°—É–º–º–∞: {trans['amount']:,.2f} —Ä—É–±.\n"
                
                if trans['interest_charged'] > 0:
                    text += f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {trans['interest_charged']:,.2f} —Ä—É–±.\n"
                
                text += f"   –ë–∞–ª–∞–Ω—Å: {trans['balance_after']:,.2f} —Ä—É–±.\n\n"
    
    if not any(card_manager.get_card_transactions(c['id'], limit=1) for c in cards):
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞—Ä—Ç–∞–º."
    
    await message.answer(text, reply_markup=get_credit_card_menu_keyboard())


async def cancel_credit_card_handler(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π"""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_credit_card_menu_keyboard()
    )