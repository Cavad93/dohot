import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from functools import partial 

from handlers import router 

from config import load_config
from database import Database
from bot import (
    cmd_start, cmd_help, handle_main_menu,
    handle_add_credit, show_user_credits, handle_credit_payment,
    show_credit_recommendations, show_capital_chart, show_financial_report,
    process_bank_name, process_monthly_payment, process_total_months,
    process_interest_rate, process_remaining_debt, process_start_date,
    process_credit_payment_callback, confirm_credit_payment,
    CreditStates, DebtStates, CategoryStates, IncomeStates,
    ExpenseStates, InvestmentStates, SavingsStates, BudgetStates,
    check_payment_reminders
)
from handlers import (
    handle_add_debt, process_debt_person_name, process_debt_amount,
    process_debt_type, process_debt_description, show_user_debts,
    handle_pay_debt, process_debt_payment_callback,
    handle_add_category, process_category_name,
    handle_add_income, process_income_amount, process_income_category,
    process_income_description,
    handle_add_expense, process_expense_amount, process_expense_category,
    process_expense_description,handle_delete_last_income, handle_delete_income_by_id,
    handle_delete_last_expense,handle_delete_expense_by_id,
    handle_add_investment, process_investment_asset_name,
    process_investment_amount, show_user_investments,
    handle_update_investment_value, process_investment_selection,
    process_investment_new_value,
    process_savings_amount,
    handle_early_payment, process_early_credit_selection,
    process_early_payment_amount, process_early_payment_type,
    handle_credit_capabilities, process_capabilities_credit_selection,
    process_capability_toggle, show_user_expenses,
    start_create_budget, start_show_budgets, start_budget_forecast,
    process_budget_month_selection,
    process_income_category_selection, process_income_category_amount,
    process_expense_category_selection, process_expense_category_amount,
    view_budget_details, edit_budget_category_start, edit_specific_category,
    process_edited_category_amount, delete_budget_callback,
    confirm_delete_budget, check_expense_budget_warning,
    cancel_handler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def register_all_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    # ==================== –ö–û–ú–ê–ù–î–´ ====================
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    
    # ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
    # ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
    dp.message.register(
        handle_main_menu,
        F.text.in_([
            "üí≥ –ö—Ä–µ–¥–∏—Ç—ã", "üí∏ –î–æ–ª–≥–∏", "üí∞ –î–æ—Ö–æ–¥—ã", "üõí –†–∞—Å—Ö–æ–¥—ã",
            "üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üè¶ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è", "üìÖ –ë—é–¥–∂–µ—Ç",
            "üìà –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ø–∏—Ç–∞–ª–∞", "üìã –û—Ç—á—ë—Ç", "‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ])
    )
    
    # ==================== –ë–Æ–î–ñ–ï–¢ ====================
    # ==================== –ë–Æ–î–ñ–ï–¢ ====================
    # –ú–µ–Ω—é –±—é–¥–∂–µ—Ç–∞
    dp.message.register(start_create_budget, F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç")
    dp.message.register(start_show_budgets, F.text == "üìã –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã")
    dp.message.register(start_budget_forecast, F.text == "üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤")

    # FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    dp.callback_query.register(process_budget_month_selection, BudgetStates.selecting_month)
    dp.callback_query.register(process_income_category_selection, BudgetStates.selecting_income_categories)
    dp.message.register(process_income_category_amount, BudgetStates.waiting_income_category_amount)
    dp.callback_query.register(process_expense_category_selection, BudgetStates.selecting_expense_categories)
    dp.message.register(process_expense_category_amount, BudgetStates.waiting_expense_category_amount)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –±—é–¥–∂–µ—Ç–æ–≤
    dp.callback_query.register(view_budget_details, F.data.startswith("view_budget_"))

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    dp.callback_query.register(edit_budget_category_start, F.data.startswith("edit_budget_cat_"))
    dp.callback_query.register(edit_specific_category, F.data.startswith("editcat_"))
    dp.message.register(process_edited_category_amount, BudgetStates.waiting_edited_category_amount)

    # –£–¥–∞–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
    dp.callback_query.register(delete_budget_callback, F.data.startswith("delete_budget_"))
    dp.callback_query.register(confirm_delete_budget, F.data.startswith("confirm_delete_"))

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.message.register(cmd_start, F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # ==================== –ö–†–ï–î–ò–¢–´ ====================
    # –ú–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–æ–≤
    dp.message.register(handle_add_credit, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")
    dp.message.register(show_user_credits, F.text == "üìã –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã")
    dp.message.register(handle_credit_payment, F.text == "‚úÖ –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂")
    dp.message.register(show_credit_recommendations, F.text == "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    dp.message.register(handle_early_payment, F.text == "‚ö° –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ")
    dp.message.register(handle_credit_capabilities, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∞")
    
    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
    dp.message.register(process_bank_name, CreditStates.waiting_bank_name)
    dp.message.register(process_monthly_payment, CreditStates.waiting_monthly_payment)
    dp.message.register(process_total_months, CreditStates.waiting_total_months)
    dp.message.register(process_interest_rate, CreditStates.waiting_interest_rate)
    dp.message.register(process_remaining_debt, CreditStates.waiting_remaining_debt)
    dp.message.register(process_start_date, CreditStates.waiting_start_date)
    
    # Callbacks –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    dp.callback_query.register(
        process_credit_payment_callback,
        StateFilter(CreditStates.selecting_credit_for_payment)
    )
    dp.callback_query.register(
        confirm_credit_payment,
        StateFilter(CreditStates.confirming_payment)
    )
    
    # FSM –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
    dp.callback_query.register(
        process_early_credit_selection,
        StateFilter(CreditStates.selecting_credit_for_early)
    )
    dp.message.register(
        process_early_payment_amount,
        CreditStates.entering_early_amount
    )
    dp.callback_query.register(
        process_early_payment_type,
        StateFilter(CreditStates.selecting_early_type)
    )
    
    # FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    dp.callback_query.register(
        process_capabilities_credit_selection,
        StateFilter(CreditStates.selecting_credit_for_capabilities)
    )
    dp.callback_query.register(
        process_capability_toggle,
        StateFilter(CreditStates.updating_capabilities)
    )
    
    # ==================== –î–û–õ–ì–ò ====================
    dp.message.register(handle_add_debt, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥")
    dp.message.register(show_user_debts, F.text == "üìã –ú–æ–∏ –¥–æ–ª–≥–∏")
    dp.message.register(handle_pay_debt, F.text == "‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥")
    
    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞
    dp.message.register(process_debt_person_name, DebtStates.waiting_person_name)
    dp.message.register(process_debt_amount, DebtStates.waiting_amount)
    dp.message.register(process_debt_type, DebtStates.waiting_type)
    dp.message.register(process_debt_description, DebtStates.waiting_description)
    
    # Callback –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
    dp.callback_query.register(
        process_debt_payment_callback,
        StateFilter(DebtStates.selecting_debt_for_payment)
    )
    
    # ==================== –ö–ê–¢–ï–ì–û–†–ò–ò ====================
    # ==================== –ö–ê–¢–ï–ì–û–†–ò–ò ====================
    dp.message.register(process_category_name, CategoryStates.waiting_name)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º cat_type —á–µ—Ä–µ–∑ partial ‚Äî –æ–±—ë—Ä—Ç–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã
    dp.message.register(
        partial(handle_add_category, cat_type="income"),
        F.text == "‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞"
    )
    dp.message.register(
        partial(handle_add_category, cat_type="expense"),
        F.text == "‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞"
    )

    # ==================== –†–ê–°–•–û–î–´ ====================
    # ==================== –†–ê–°–•–û–î–´ ====================
    dp.message.register(handle_add_expense, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    dp.message.register(show_user_expenses, F.text == "üìã –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã")
    # ‚Üì‚Üì‚Üì –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Üì‚Üì‚Üì
    dp.message.register(handle_delete_last_expense, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥")
    dp.message.register(handle_delete_expense_by_id, F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –ø–æ ID")
    # ‚Üë‚Üë‚Üë –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Üë‚Üë‚Üë

    # ==================== –î–û–•–û–î–´ ====================
    dp.message.register(handle_add_income, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
    # ‚Üì‚Üì‚Üì –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Üì‚Üì‚Üì
    dp.message.register(handle_delete_last_income, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥")
    dp.message.register(handle_delete_income_by_id, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥ –ø–æ ID")
    # ‚Üë‚Üë‚Üë –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Üë‚Üë‚Üë

    
    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
    dp.message.register(process_income_amount, IncomeStates.waiting_amount)
    dp.callback_query.register(
        process_income_category,
        StateFilter(IncomeStates.selecting_category)
    )
    dp.message.register(process_income_description, IncomeStates.waiting_description)
    
    
    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
    dp.message.register(process_expense_amount, ExpenseStates.waiting_amount)
    dp.callback_query.register(
        process_expense_category,
        StateFilter(ExpenseStates.selecting_category)
    )
    dp.message.register(process_expense_description, ExpenseStates.waiting_description)
    
    # ==================== –ò–ù–í–ï–°–¢–ò–¶–ò–ò ====================
    dp.message.register(handle_add_investment, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é")
    dp.message.register(show_user_investments, F.text == "üìã –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    dp.message.register(handle_update_investment_value, F.text == "üíπ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
    
    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    dp.message.register(process_investment_asset_name, InvestmentStates.waiting_asset_name)
    dp.message.register(process_investment_amount, InvestmentStates.waiting_invested_amount)
    
    # FSM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    dp.callback_query.register(
        process_investment_selection,
        StateFilter(InvestmentStates.selecting_investment)
    )
    dp.message.register(process_investment_new_value, InvestmentStates.waiting_new_value)
    
    # ==================== –°–ë–ï–†–ï–ñ–ï–ù–ò–Ø ====================
    dp.message.register(process_savings_amount, SavingsStates.waiting_amount)
    
    # ==================== –û–¢–ß–Å–¢–´ –ò –ì–†–ê–§–ò–ö–ò ====================
    dp.message.register(show_capital_chart, F.text == "üìà –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ø–∏—Ç–∞–ª–∞")
    dp.message.register(show_financial_report, F.text == "üìã –û—Ç—á—ë—Ç")


async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç DoHot –∑–∞–ø—É—â–µ–Ω!")


async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    # await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç DoHot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        config = load_config()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=config.bot_token)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    dp.include_router(router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_all_handlers(dp)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        check_payment_reminders,
        CronTrigger(
            hour=config.reminder_time_hour,
            minute=config.reminder_time_minute
        ),
        args=[bot]
    )
    scheduler.start()
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {config.reminder_time_hour:02d}:{config.reminder_time_minute:02d}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup –∏ shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        scheduler.shutdown()
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
