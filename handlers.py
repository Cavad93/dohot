from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from datetime import datetime

from database import Database
from calculations import FinancialCalculator
from bot import (
    DebtStates, CategoryStates, IncomeStates, ExpenseStates, 
    InvestmentStates, SavingsStates, CreditStates,
    get_main_menu_keyboard, get_debt_menu_keyboard,
    get_income_expense_keyboard, get_investment_menu_keyboard,
    get_cancel_keyboard, get_credit_menu_keyboard
)

db = Database()


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–õ–ì–û–í ====================

async def handle_add_debt(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–ª–≥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(DebtStates.waiting_person_name)


async def process_debt_person_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –¥–æ–ª–≥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    await state.update_data(person_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(DebtStates.waiting_amount)


async def process_debt_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ–ª–≥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        
        keyboard = [
            [KeyboardButton(text="–Ø –≤–∑—è–ª –≤ –¥–æ–ª–≥")],
            [KeyboardButton(text="–Ø –¥–∞–ª –≤ –¥–æ–ª–≥")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–ª–≥–∞:",
            reply_markup=markup
        )
        await state.set_state(DebtStates.waiting_type)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50")


async def process_debt_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –¥–æ–ª–≥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    if message.text == "–Ø –≤–∑—è–ª –≤ –¥–æ–ª–≥":
        debt_type = "taken"
    elif message.text == "–Ø –¥–∞–ª –≤ –¥–æ–ª–≥":
        debt_type = "given"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫")
        return
    
    await state.update_data(debt_type=debt_type)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(DebtStates.waiting_description)


async def process_debt_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–≥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    
    description = None if message.text == "0" else message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥ –≤ –±–∞–∑—É
    db.add_debt(
        user_id=message.from_user.id,
        person_name=data['person_name'],
        amount=data['amount'],
        debt_type=data['debt_type'],
        description=description
    )
    
    await state.clear()
    
    debt_type_text = "–≤–∑—è–ª–∏ —É" if data['debt_type'] == 'taken' else "–¥–∞–ª–∏"
    
    await message.answer(
        f"‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üë§ –í—ã {debt_type_text} {data['person_name']}\n"
        f"üí∞ –°—É–º–º–∞: {data['amount']:,.2f} —Ä—É–±.\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=get_debt_menu_keyboard()
    )


async def show_user_debts(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_debts = db.get_user_debts(message.from_user.id, unpaid_only=False)
    
    if not all_debts:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥'",
            reply_markup=get_debt_menu_keyboard()
        )
        return
    
    active_debts = [d for d in all_debts if not d['is_paid']]
    paid_debts = [d for d in all_debts if d['is_paid']]
    
    text = "üìã –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"
    
    if active_debts:
        text += "üî¥ –ê–ö–¢–ò–í–ù–´–ï:\n\n"
        for i, debt in enumerate(active_debts, 1):
            debt_type_text = "–í–∑—è–ª —É" if debt['debt_type'] == 'taken' else "–î–∞–ª"
            text += f"{i}. {debt_type_text} {debt['person_name']}\n"
            text += f"   üí∞ –°—É–º–º–∞: {debt['amount']:,.2f} —Ä—É–±.\n"
            text += f"   üìÖ –î–∞—Ç–∞: {debt['date']}\n"
            if debt['description']:
                text += f"   üìù {debt['description']}\n"
            text += "\n"
    
    if paid_debts:
        text += "‚úÖ –ü–û–ì–ê–®–ï–ù–ù–´–ï:\n\n"
        for i, debt in enumerate(paid_debts, 1):
            debt_type_text = "–í–∑—è–ª —É" if debt['debt_type'] == 'taken' else "–î–∞–ª"
            text += f"{i}. {debt_type_text} {debt['person_name']}: {debt['amount']:,.2f} —Ä—É–±.\n"
    
    await message.answer(text, reply_markup=get_debt_menu_keyboard())


async def handle_pay_debt(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    debts = db.get_user_debts(message.from_user.id, unpaid_only=True)
    
    if not debts:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤",
            reply_markup=get_debt_menu_keyboard()
        )
        return
    
    keyboard = []
    for debt in debts:
        debt_type_text = "–í–∑—è–ª —É" if debt['debt_type'] == 'taken' else "–î–∞–ª"
        keyboard.append([InlineKeyboardButton(
            text=f"{debt_type_text} {debt['person_name']} ({debt['amount']:.2f} ‚ÇΩ)",
            callback_data=f"pay_debt_{debt['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(DebtStates.selecting_debt_for_payment)


async def process_debt_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_debt_menu_keyboard()
        )
        return
    
    debt_id = int(callback.data.split("_")[2])
    
    # –ü–æ–º–µ—á–∞–µ–º –¥–æ–ª–≥ –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π
    db.mark_debt_paid(debt_id)
    
    await callback.message.delete()
    await state.clear()
    
    await callback.message.answer(
        "‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ–≥–∞—à–µ–Ω!",
        reply_markup=get_debt_menu_keyboard()
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô ====================

async def handle_add_category(message: types.Message, state: FSMContext, cat_type: str):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    type_text = "–¥–æ—Ö–æ–¥–∞" if cat_type == "income" else "—Ä–∞—Å—Ö–æ–¥–∞"
    await state.update_data(cat_type=cat_type)
    await message.answer(
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {type_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CategoryStates.waiting_name)

# –û–±—ë—Ä—Ç–∫–∏ –ø–æ–¥ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def start_add_income_category(message: types.Message, state: FSMContext):
    return await handle_add_category(message, state, "income")

async def start_add_expense_category(message: types.Message, state: FSMContext):
    return await handle_add_category(message, state, "expense")

async def show_user_expenses(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    expenses = db.get_user_expenses(user_id=user_id)

    if not expenses:
        await message.answer("–ü–æ–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.", reply_markup=get_income_expense_keyboard(income=False))
        return

    # –ø–æ–¥—Ç—è–Ω–µ–º –∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cats = {c["id"]: c["name"] for c in db.get_user_categories(user_id, cat_type="expense")}
    lines = []
    for row in expenses[:10]:  # –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        dt = row.get("date") or row.get("created_at")
        amount = row["amount"]
        cat_name = cats.get(row.get("category_id"), "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        desc = row.get("description") or ""
        lines.append(f"‚Ä¢ {dt} ‚Äî {amount:,.2f} ‚ÇΩ ‚Äî {cat_name}{' ‚Äî '+desc if desc else ''}")

    text = "üìã –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):\n\n" + "\n".join(lines)
    await message.answer(text, reply_markup=get_income_expense_keyboard(income=False))


async def process_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É
    db.add_category(
        user_id=message.from_user.id,
        name=message.text,
        cat_type=data['cat_type']
    )
    
    await state.clear()
    
    type_text = "–¥–æ—Ö–æ–¥–∞" if data['cat_type'] == "income" else "—Ä–∞—Å—Ö–æ–¥–∞"
    
    await message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {type_text} '{message.text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_menu_keyboard()
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–•–û–î–û–í ====================

async def handle_add_income(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(IncomeStates.waiting_amount)


async def process_income_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        categories = db.get_user_categories(message.from_user.id, cat_type="income")
        
        if not categories:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            )
            await state.set_state(IncomeStates.waiting_description)
            return
        
        keyboard = []
        for cat in categories:
            keyboard.append([InlineKeyboardButton(
                text=cat['name'],
                callback_data=f"income_cat_{cat['id']}"
            )])
        keyboard.append([InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="income_cat_0")])
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(IncomeStates.selecting_category)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000 –∏–ª–∏ 50000.50")


async def process_income_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_income_expense_keyboard(income=True)
        )
        return
    
    category_id = int(callback.data.split("_")[2])
    category_id = None if category_id == 0 else category_id
    
    await state.update_data(category_id=category_id)
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(IncomeStates.waiting_description)


async def process_income_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    
    description = None if message.text == "0" else message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –≤ –±–∞–∑—É
    db.add_income(
        user_id=message.from_user.id,
        amount=data['amount'],
        category_id=data.get('category_id'),
        description=description
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üí∞ –°—É–º–º–∞: {data['amount']:,.2f} —Ä—É–±.\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=get_income_expense_keyboard(income=True)
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–°–•–û–î–û–í ====================

async def handle_add_expense(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ExpenseStates.waiting_amount)


async def process_expense_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        categories = db.get_user_categories(message.from_user.id, cat_type="expense")
        
        if not categories:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            )
            await state.set_state(ExpenseStates.waiting_description)
            return
        
        keyboard = []
        for cat in categories:
            keyboard.append([InlineKeyboardButton(
                text=cat['name'],
                callback_data=f"expense_cat_{cat['id']}"
            )])
        keyboard.append([InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="expense_cat_0")])
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(ExpenseStates.selecting_category)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50")


async def process_expense_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_income_expense_keyboard(income=False)
        )
        return
    
    category_id = int(callback.data.split("_")[2])
    category_id = None if category_id == 0 else category_id
    
    await state.update_data(category_id=category_id)
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ExpenseStates.waiting_description)


async def process_expense_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    
    description = None if message.text == "0" else message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É
    db.add_expense(
        user_id=message.from_user.id,
        amount=data['amount'],
        category_id=data.get('category_id'),
        description=description
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üí∞ –°—É–º–º–∞: {data['amount']:,.2f} —Ä—É–±.\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=get_income_expense_keyboard(income=False)
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–í–ï–°–¢–ò–¶–ò–ô ====================

async def handle_add_investment(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(InvestmentStates.waiting_asset_name)


async def process_investment_asset_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    await state.update_data(asset_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(InvestmentStates.waiting_invested_amount)


async def process_investment_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    try:
        invested_amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –≤ –±–∞–∑—É
        db.add_investment(
            user_id=message.from_user.id,
            asset_name=data['asset_name'],
            invested_amount=invested_amount
        )
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìä –ê–∫—Ç–∏–≤: {data['asset_name']}\n"
            f"üí∞ –í–ª–æ–∂–µ–Ω–æ: {invested_amount:,.2f} —Ä—É–±.\n"
            f"üíπ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {invested_amount:,.2f} —Ä—É–±.",
            reply_markup=get_investment_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100000 –∏–ª–∏ 100000.50")


async def show_user_investments(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    investments = db.get_user_investments(message.from_user.id)
    
    if not investments:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é'",
            reply_markup=get_investment_menu_keyboard()
        )
        return
    
    text = "üìä –í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:\n\n"
    total_invested = 0
    total_current = 0
    
    for i, inv in enumerate(investments, 1):
        profit = inv['current_value'] - inv['invested_amount']
        profit_pct = (profit / inv['invested_amount'] * 100) if inv['invested_amount'] > 0 else 0
        
        profit_emoji = "üìà" if profit >= 0 else "üìâ"
        
        text += f"{i}. {inv['asset_name']}\n"
        text += f"   üí∞ –í–ª–æ–∂–µ–Ω–æ: {inv['invested_amount']:,.2f} —Ä—É–±.\n"
        text += f"   üíπ –¢–µ–∫—É—â–∞—è: {inv['current_value']:,.2f} —Ä—É–±.\n"
        text += f"   {profit_emoji} –ü—Ä–∏–±—ã–ª—å: {profit:,.2f} —Ä—É–±. ({profit_pct:+.2f}%)\n"
        text += f"   üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {inv['last_updated']}\n\n"
        
        total_invested += inv['invested_amount']
        total_current += inv['current_value']
    
    total_profit = total_current - total_invested
    total_profit_pct = (total_profit / total_invested * 100) if total_invested > 0 else 0
    
    text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"–ò–¢–û–ì–û:\n"
    text += f"–í–ª–æ–∂–µ–Ω–æ: {total_invested:,.2f} —Ä—É–±.\n"
    text += f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_current:,.2f} —Ä—É–±.\n"
    text += f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:,.2f} —Ä—É–±. ({total_profit_pct:+.2f}%)"
    
    await message.answer(text, reply_markup=get_investment_menu_keyboard())


async def handle_update_investment_value(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    investments = db.get_user_investments(message.from_user.id)
    
    if not investments:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            reply_markup=get_investment_menu_keyboard()
        )
        return
    
    keyboard = []
    for inv in investments:
        keyboard.append([InlineKeyboardButton(
            text=f"{inv['asset_name']} ({inv['current_value']:.2f} ‚ÇΩ)",
            callback_data=f"update_inv_{inv['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(InvestmentStates.selecting_investment)


async def process_investment_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_investment_menu_keyboard()
        )
        return
    
    investment_id = int(callback.data.split("_")[2])
    await state.update_data(investment_id=investment_id)
    
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(InvestmentStates.waiting_new_value)


async def process_investment_new_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    try:
        new_value = float(message.text.replace(",", "."))
        data = await state.get_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        db.update_investment_value(data['investment_id'], new_value)
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üíπ –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_value:,.2f} —Ä—É–±.",
            reply_markup=get_investment_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 120000 –∏–ª–∏ 120000.50")


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ë–ï–†–ï–ñ–ï–ù–ò–ô ====================

async def process_savings_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    try:
        amount = float(message.text.replace(",", "."))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –≤ –±–∞–∑—É
        db.add_savings(
            user_id=message.from_user.id,
            amount=amount
        )
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –°—É–º–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üè¶ –¢–µ–∫—É—â–∏–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è: {amount:,.2f} —Ä—É–±.",
            reply_markup=get_main_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250000 –∏–ª–∏ 250000.50")


# ==================== –î–û–°–†–û–ß–ù–û–ï –ü–û–ì–ê–®–ï–ù–ò–ï –ö–†–ï–î–ò–¢–û–í ====================

async def handle_early_payment(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    credits = db.get_user_credits(message.from_user.id)
    
    if not credits:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    keyboard = []
    for credit in credits:
        keyboard.append([InlineKeyboardButton(
            text=f"{credit['display_name']} ({credit['remaining_debt']:.2f} ‚ÇΩ)",
            callback_data=f"early_credit_{credit['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditStates.selecting_credit_for_early)


async def process_early_credit_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    credit_id = int(callback.data.split("_")[2])
    credit = db.get_credit_by_id(credit_id)
    await state.update_data(credit_id=credit_id)
    
    await callback.message.delete()
    await callback.message.answer(
        f"–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞:\n"
        f"üè¶ {credit['display_name']}\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {credit['remaining_debt']:,.2f} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreditStates.entering_early_amount)


async def process_early_payment_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    try:
        amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        credit = db.get_credit_by_id(data['credit_id'])
        
        if amount > credit['remaining_debt']:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ ({credit['remaining_debt']:,.2f} —Ä—É–±.)!\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –±–æ–ª–µ–µ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞:"
            )
            return
        
        await state.update_data(early_amount=amount)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
        keyboard = []
        
        if amount >= credit['remaining_debt']:
            # –ü–æ–ª–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
            keyboard.append([InlineKeyboardButton(
                text="‚úÖ –ü–æ–ª–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ",
                callback_data="early_type_full"
            )])
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
            if credit['has_early_partial_period']:
                keyboard.append([InlineKeyboardButton(
                    text="üìÖ –° —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞",
                    callback_data="early_type_reduce_period"
                )])
            if credit['has_early_partial_payment']:
                keyboard.append([InlineKeyboardButton(
                    text="üí∞ –° —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞",
                    callback_data="early_type_reduce_payment"
                )])
        
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        if len(keyboard) == 1:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –∫—Ä–µ–¥–∏—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ.\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∞'",
                reply_markup=get_credit_menu_keyboard()
            )
            await state.clear()
            return
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CreditStates.selecting_early_type)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000 –∏–ª–∏ 50000.50")


async def process_early_payment_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    data = await state.get_data()
    credit_id = data['credit_id']
    early_amount = data['early_amount']
    early_type = callback.data.split("_")[-1]
    
    if early_type == "full":
        payment_type = "early_full"
    elif early_type == "period":
        payment_type = "early_partial_period"
    else:
        payment_type = "early_partial_payment"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    credit = db.get_credit_by_id(credit_id)
    
    if payment_type == "early_full":
        db.add_credit_payment(credit_id, credit['remaining_debt'], payment_type)
        result_text = f"üéâ –ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!\n\nüè¶ {credit['display_name']}"
    else:
        calculation = FinancialCalculator.calculate_effective_rate_with_early_payment(
            credit, early_amount, 
            'reduce_period' if payment_type == 'early_partial_period' else 'reduce_payment'
        )
        
        db.add_credit_payment(credit_id, early_amount, payment_type)
        
        if payment_type == 'early_partial_period':
            result_text = (
                f"‚úÖ –î–æ—Å—Ä–æ—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç!\n\n"
                f"üè¶ {credit['display_name']}\n"
                f"üí∞ –í–Ω–µ—Å–µ–Ω–æ: {early_amount:,.2f} —Ä—É–±.\n"
                f"üìä –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {calculation['new_debt']:,.2f} —Ä—É–±.\n"
                f"üìÖ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–∞: {calculation['saved_months']} –º–µ—Å.\n"
                f"üíµ –ü–ª–∞—Ç—ë–∂ –æ—Å—Ç–∞–ª—Å—è: {calculation['new_payment']:,.2f} —Ä—É–±.\n"
                f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è: {calculation['saved_amount']:,.2f} —Ä—É–±."
            )
        else:
            result_text = (
                f"‚úÖ –î–æ—Å—Ä–æ—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç!\n\n"
                f"üè¶ {credit['display_name']}\n"
                f"üí∞ –í–Ω–µ—Å–µ–Ω–æ: {early_amount:,.2f} —Ä—É–±.\n"
                f"üìä –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {calculation['new_debt']:,.2f} —Ä—É–±.\n"
                f"üíµ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂: {calculation['new_payment']:,.2f} —Ä—É–±.\n"
                f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è –∑–∞ —Å—Ä–æ–∫: {calculation['saved_amount']:,.2f} —Ä—É–±."
            )
    
    await callback.message.delete()
    await state.clear()
    await callback.message.answer(result_text, reply_markup=get_credit_menu_keyboard())


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –ö–†–ï–î–ò–¢–ê ====================

async def handle_credit_capabilities(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫—Ä–µ–¥–∏—Ç–∞"""
    credits = db.get_user_credits(message.from_user.id)
    
    if not credits:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    keyboard = []
    for credit in credits:
        keyboard.append([InlineKeyboardButton(
            text=credit['display_name'],
            callback_data=f"cap_credit_{credit['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditStates.selecting_credit_for_capabilities)


async def process_capabilities_credit_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    credit_id = int(callback.data.split("_")[2])
    credit = db.get_credit_by_id(credit_id)
    await state.update_data(credit_id=credit_id)
    
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_full'] else '‚ùå'} –ü–æ–ª–Ω–æ–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ",
            callback_data=f"toggle_full"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_period'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞",
            callback_data=f"toggle_period"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_payment'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞",
            callback_data=f"toggle_payment"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_holidays'] else '‚ùå'} –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã",
            callback_data=f"toggle_holidays"
        )],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="cap_done")]
    ]
    
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫—Ä–µ–¥–∏—Ç–∞:\n"
        f"üè¶ {credit['display_name']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditStates.updating_capabilities)


async def process_capability_toggle(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫—Ä–µ–¥–∏—Ç–∞"""
    if callback.data == "cap_done":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    data = await state.get_data()
    credit_id = data['credit_id']
    credit = db.get_credit_by_id(credit_id)
    
    toggle_type = callback.data.split("_")[1]
    
    if toggle_type == "full":
        db.update_credit_capabilities(credit_id, has_early_full=not credit['has_early_full'])
    elif toggle_type == "period":
        db.update_credit_capabilities(credit_id, has_early_partial_period=not credit['has_early_partial_period'])
    elif toggle_type == "payment":
        db.update_credit_capabilities(credit_id, has_early_partial_payment=not credit['has_early_partial_payment'])
    elif toggle_type == "holidays":
        db.update_credit_capabilities(credit_id, has_holidays=not credit['has_holidays'])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    credit = db.get_credit_by_id(credit_id)
    
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_full'] else '‚ùå'} –ü–æ–ª–Ω–æ–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ",
            callback_data=f"toggle_full"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_period'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞",
            callback_data=f"toggle_period"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_payment'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞",
            callback_data=f"toggle_payment"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_holidays'] else '‚ùå'} –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã",
            callback_data=f"toggle_holidays"
        )],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="cap_done")]
    ]
    
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def cancel_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_menu_keyboard()
    )
