import logging
from aiogram import types, F, Router
from aiogram.filters import StateFilter 
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from datetime import datetime
import calendar
import sqlite3
import asyncio

logger = logging.getLogger(__name__)

from aiogram import Router
router = Router()

from database import Database
from calculations import FinancialCalculator
from bot import (
    DebtStates, CategoryStates, IncomeStates, ExpenseStates, 
    InvestmentStates, SavingsStates, CreditStates, BudgetStates,
    get_main_menu_keyboard, get_debt_menu_keyboard,
    get_income_expense_keyboard, get_investment_menu_keyboard,
    get_cancel_keyboard, get_credit_menu_keyboard, get_budget_menu_keyboard
)

db = Database()
# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–õ–ì–û–í ====================

async def handle_add_debt(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–ª–≥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(DebtStates.waiting_person_name)


async def process_debt_person_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –¥–æ–ª–≥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    await state.update_data(person_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(DebtStates.waiting_amount)


async def process_debt_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ–ª–≥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        
        keyboard = [
            [KeyboardButton(text="–Ø –≤–∑—è–ª –≤ –¥–æ–ª–≥")],
            [KeyboardButton(text="–Ø –¥–∞–ª –≤ –¥–æ–ª–≥")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–ª–≥–∞:",
            reply_markup=markup
        )
        await state.set_state(DebtStates.waiting_type)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50")


async def process_debt_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –¥–æ–ª–≥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    if message.text == "–Ø –≤–∑—è–ª –≤ –¥–æ–ª–≥":
        debt_type = "taken"
    elif message.text == "–Ø –¥–∞–ª –≤ –¥–æ–ª–≥":
        debt_type = "given"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫")
        return
    
    await state.update_data(debt_type=debt_type)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(DebtStates.waiting_description)


async def process_debt_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–≥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    
    description = None if message.text == "0" else message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥ –≤ –±–∞–∑—É
    db.add_debt(
        user_id=message.from_user.id,
        person_name=data['person_name'],
        amount=data['amount'],
        debt_type=data['debt_type'],
        description=description
    )
    
    await state.clear()
    
    debt_type_text = "–≤–∑—è–ª–∏ —É" if data['debt_type'] == 'taken' else "–¥–∞–ª–∏"
    
    await message.answer(
        f"‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üë§ –í—ã {debt_type_text} {data['person_name']}\n"
        f"üí∞ –°—É–º–º–∞: {data['amount']:,.2f} —Ä—É–±.\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=get_debt_menu_keyboard()
    )


async def show_user_debts(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_debts = db.get_user_debts(message.from_user.id, unpaid_only=False)
    
    if not all_debts:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥'",
            reply_markup=get_debt_menu_keyboard()
        )
        return
    
    active_debts = [d for d in all_debts if not d['is_paid']]
    paid_debts = [d for d in all_debts if d['is_paid']]
    
    text = "üìã –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"
    
    if active_debts:
        text += "üî¥ –ê–ö–¢–ò–í–ù–´–ï:\n\n"
        for i, debt in enumerate(active_debts, 1):
            debt_type_text = "–í–∑—è–ª —É" if debt['debt_type'] == 'taken' else "–î–∞–ª"
            text += f"{i}. {debt_type_text} {debt['person_name']}\n"
            text += f"   üí∞ –°—É–º–º–∞: {debt['amount']:,.2f} —Ä—É–±.\n"
            text += f"   üìÖ –î–∞—Ç–∞: {debt['date']}\n"
            if debt['description']:
                text += f"   üìù {debt['description']}\n"
            text += "\n"
    
    if paid_debts:
        text += "‚úÖ –ü–û–ì–ê–®–ï–ù–ù–´–ï:\n\n"
        for i, debt in enumerate(paid_debts, 1):
            debt_type_text = "–í–∑—è–ª —É" if debt['debt_type'] == 'taken' else "–î–∞–ª"
            text += f"{i}. {debt_type_text} {debt['person_name']}: {debt['amount']:,.2f} —Ä—É–±.\n"
    
    await message.answer(text, reply_markup=get_debt_menu_keyboard())


async def handle_pay_debt(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    debts = db.get_user_debts(message.from_user.id, unpaid_only=True)
    
    if not debts:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤",
            reply_markup=get_debt_menu_keyboard()
        )
        return
    
    keyboard = []
    for debt in debts:
        debt_type_text = "–í–∑—è–ª —É" if debt['debt_type'] == 'taken' else "–î–∞–ª"
        keyboard.append([InlineKeyboardButton(
            text=f"{debt_type_text} {debt['person_name']} ({debt['amount']:.2f} ‚ÇΩ)",
            callback_data=f"pay_debt_{debt['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(DebtStates.selecting_debt_for_payment)


async def process_debt_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_debt_menu_keyboard()
        )
        return
    
    debt_id = int(callback.data.split("_")[2])
    
    # –ü–æ–º–µ—á–∞–µ–º –¥–æ–ª–≥ –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π
    db.mark_debt_paid(debt_id)
    
    await callback.message.delete()
    await state.clear()
    
    await callback.message.answer(
        "‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ–≥–∞—à–µ–Ω!",
        reply_markup=get_debt_menu_keyboard()
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô ====================

async def handle_add_category(message: types.Message, state: FSMContext, cat_type: str):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    type_text = "–¥–æ—Ö–æ–¥–∞" if cat_type == "income" else "—Ä–∞—Å—Ö–æ–¥–∞"
    await state.update_data(cat_type=cat_type)
    await message.answer(
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {type_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CategoryStates.waiting_name)

# –û–±—ë—Ä—Ç–∫–∏ –ø–æ–¥ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def start_add_income_category(message: types.Message, state: FSMContext):
    return await handle_add_category(message, state, "income")

async def start_add_expense_category(message: types.Message, state: FSMContext):
    return await handle_add_category(message, state, "expense")

async def show_user_expenses(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    expenses = db.get_user_expenses(user_id=user_id)

    if not expenses:
        await message.answer("–ü–æ–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.", reply_markup=get_income_expense_keyboard(income=False))
        return

    # –ø–æ–¥—Ç—è–Ω–µ–º –∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cats = {c["id"]: c["name"] for c in db.get_user_categories(user_id, cat_type="expense")}
    lines = []
    for row in expenses[:10]:  # –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        dt = row.get("date") or row.get("created_at")
        amount = row["amount"]
        cat_name = cats.get(row.get("category_id"), "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        desc = row.get("description") or ""
        lines.append(f"‚Ä¢ {dt} ‚Äî {amount:,.2f} ‚ÇΩ ‚Äî {cat_name}{' ‚Äî '+desc if desc else ''}")

    text = "üìã –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):\n\n" + "\n".join(lines)
    await message.answer(text, reply_markup=get_income_expense_keyboard(income=False))


async def process_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É
    db.add_category(
        user_id=message.from_user.id,
        name=message.text,
        cat_type=data['cat_type']
    )
    
    await state.clear()
    
    type_text = "–¥–æ—Ö–æ–¥–∞" if data['cat_type'] == "income" else "—Ä–∞—Å—Ö–æ–¥–∞"
    
    await message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {type_text} '{message.text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_menu_keyboard()
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–•–û–î–û–í ====================

async def handle_add_income(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(IncomeStates.waiting_amount)


async def process_income_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        categories = db.get_user_categories(message.from_user.id, cat_type="income")
        
        if not categories:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            )
            await state.set_state(IncomeStates.waiting_description)
            return
        
        keyboard = []
        for cat in categories:
            keyboard.append([InlineKeyboardButton(
                text=cat['name'],
                callback_data=f"income_cat_{cat['id']}"
            )])
        keyboard.append([InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="income_cat_0")])
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(IncomeStates.selecting_category)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000 –∏–ª–∏ 50000.50")


async def process_income_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_income_expense_keyboard(income=True)
        )
        return
    
    category_id = int(callback.data.split("_")[2])
    category_id = None if category_id == 0 else category_id
    
    await state.update_data(category_id=category_id)
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(IncomeStates.waiting_description)


async def process_income_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    
    description = None if message.text == "0" else message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –≤ –±–∞–∑—É
    db.add_income(
        user_id=message.from_user.id,
        amount=data['amount'],
        category_id=data.get('category_id'),
        description=description
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üí∞ –°—É–º–º–∞: {data['amount']:,.2f} —Ä—É–±.\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=get_income_expense_keyboard(income=True)
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–°–•–û–î–û–í ====================

async def handle_add_expense(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ExpenseStates.waiting_amount)


async def process_expense_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        categories = db.get_user_categories(message.from_user.id, cat_type="expense")
        
        if not categories:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            )
            await state.set_state(ExpenseStates.waiting_description)
            return
        
        keyboard = []
        for cat in categories:
            keyboard.append([InlineKeyboardButton(
                text=cat['name'],
                callback_data=f"expense_cat_{cat['id']}"
            )])
        keyboard.append([InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="expense_cat_0")])
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(ExpenseStates.selecting_category)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50")


async def process_expense_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_income_expense_keyboard(income=False)
        )
        return
    
    category_id = int(callback.data.split("_")[2])
    category_id = None if category_id == 0 else category_id
    
    await state.update_data(category_id=category_id)
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ExpenseStates.waiting_description)


async def process_expense_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    from datetime import date
    
    data = await state.get_data()
    
    description = None if message.text == "0" else message.text
    expense_date = date.today().isoformat()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É
    db.add_expense(
        user_id=message.from_user.id,
        amount=data['amount'],
        category_id=data.get('category_id'),
        description=description,
        expense_date=expense_date
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É
    budget_warning = await check_expense_budget_warning(
        message.from_user.id,
        data.get('category_id'),
        data['amount'],
        expense_date
    )
    
    await state.clear()
    
    response_text = f"‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
    response_text += f"üí∏ –°—É–º–º–∞: {data['amount']:,.2f} —Ä—É–±.\n"
    response_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
    response_text += budget_warning
    
    await message.answer(
        response_text,
        reply_markup=get_income_expense_keyboard(income=False)
    )


async def check_expense_budget_warning(user_id: int, category_id: int, 
                                       amount: float, expense_date: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –±—é–¥–∂–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    
    check_result = db.check_expense_against_budget(user_id, category_id, amount, expense_date)
    
    if not check_result['has_budget']:
        return ""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_cats = db.get_user_categories(user_id)
    cat_name = next((c['name'] for c in all_cats if c['id'] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    warning = f"\n\nüìä –°–¢–ê–¢–£–° –ë–Æ–î–ñ–ï–¢–ê\n"
    warning += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}\n\n"
    
    if not check_result['category_in_budget']:
        warning += f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—é–¥–∂–µ—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü!\n\n"
        warning += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±—é–¥–∂–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤."
        return warning
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å –≤ –±—é–¥–∂–µ—Ç–µ
    planned = check_result['planned']
    spent_after = check_result['spent_after']
    percent = check_result['percent_used']
    
    warning += f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned:,.2f} —Ä—É–±.\n"
    warning += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent_after:,.2f} —Ä—É–±.\n"
    warning += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {percent:.1f}%\n\n"
    
    if check_result['over_budget']:
        warning += f"üö® –ü–†–ï–í–´–®–ï–ù –ë–Æ–î–ñ–ï–¢ –Ω–∞ {spent_after - planned:,.2f} —Ä—É–±.!"
    elif percent >= 90:
        warning += f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {100 - percent:.1f}% –±—é–¥–∂–µ—Ç–∞ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!"
    elif percent >= 75:
        warning += f"‚ö° –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ {percent:.1f}% –±—é–¥–∂–µ—Ç–∞. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!"
    elif percent >= 50:
        warning += f"‚úÖ –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ {percent:.1f}% –±—é–¥–∂–µ—Ç–∞."
    else:
        warning += f"‚úÖ –ë—é–¥–∂–µ—Ç –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {percent:.1f}%."
    
    return warning

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–í–ï–°–¢–ò–¶–ò–ô ====================

async def handle_add_investment(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(InvestmentStates.waiting_asset_name)


async def process_investment_asset_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    await state.update_data(asset_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(InvestmentStates.waiting_invested_amount)


async def process_investment_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    try:
        invested_amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –≤ –±–∞–∑—É
        db.add_investment(
            user_id=message.from_user.id,
            asset_name=data['asset_name'],
            invested_amount=invested_amount
        )
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìä –ê–∫—Ç–∏–≤: {data['asset_name']}\n"
            f"üí∞ –í–ª–æ–∂–µ–Ω–æ: {invested_amount:,.2f} —Ä—É–±.\n"
            f"üíπ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {invested_amount:,.2f} —Ä—É–±.",
            reply_markup=get_investment_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100000 –∏–ª–∏ 100000.50")


async def show_user_investments(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    investments = db.get_user_investments(message.from_user.id)
    
    if not investments:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é'",
            reply_markup=get_investment_menu_keyboard()
        )
        return
    
    text = "üìä –í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:\n\n"
    total_invested = 0
    total_current = 0
    
    for i, inv in enumerate(investments, 1):
        profit = inv['current_value'] - inv['invested_amount']
        profit_pct = (profit / inv['invested_amount'] * 100) if inv['invested_amount'] > 0 else 0
        
        profit_emoji = "üìà" if profit >= 0 else "üìâ"
        
        text += f"{i}. {inv['asset_name']}\n"
        text += f"   üí∞ –í–ª–æ–∂–µ–Ω–æ: {inv['invested_amount']:,.2f} —Ä—É–±.\n"
        text += f"   üíπ –¢–µ–∫—É—â–∞—è: {inv['current_value']:,.2f} —Ä—É–±.\n"
        text += f"   {profit_emoji} –ü—Ä–∏–±—ã–ª—å: {profit:,.2f} —Ä—É–±. ({profit_pct:+.2f}%)\n"
        text += f"   üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {inv['last_updated']}\n\n"
        
        total_invested += inv['invested_amount']
        total_current += inv['current_value']
    
    total_profit = total_current - total_invested
    total_profit_pct = (total_profit / total_invested * 100) if total_invested > 0 else 0
    
    text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"–ò–¢–û–ì–û:\n"
    text += f"–í–ª–æ–∂–µ–Ω–æ: {total_invested:,.2f} —Ä—É–±.\n"
    text += f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_current:,.2f} —Ä—É–±.\n"
    text += f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:,.2f} —Ä—É–±. ({total_profit_pct:+.2f}%)"
    
    await message.answer(text, reply_markup=get_investment_menu_keyboard())


async def handle_update_investment_value(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    investments = db.get_user_investments(message.from_user.id)
    
    if not investments:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            reply_markup=get_investment_menu_keyboard()
        )
        return
    
    keyboard = []
    for inv in investments:
        keyboard.append([InlineKeyboardButton(
            text=f"{inv['asset_name']} ({inv['current_value']:.2f} ‚ÇΩ)",
            callback_data=f"update_inv_{inv['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(InvestmentStates.selecting_investment)


async def process_investment_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_investment_menu_keyboard()
        )
        return
    
    investment_id = int(callback.data.split("_")[2])
    await state.update_data(investment_id=investment_id)
    
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(InvestmentStates.waiting_new_value)


async def process_investment_new_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    try:
        new_value = float(message.text.replace(",", "."))
        data = await state.get_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        db.update_investment_value(data['investment_id'], new_value)
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üíπ –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_value:,.2f} —Ä—É–±.",
            reply_markup=get_investment_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 120000 –∏–ª–∏ 120000.50")


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ë–ï–†–ï–ñ–ï–ù–ò–ô ====================

async def process_savings_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    try:
        amount = float(message.text.replace(",", "."))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –≤ –±–∞–∑—É
        db.add_savings(
            user_id=message.from_user.id,
            amount=amount
        )
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –°—É–º–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üè¶ –¢–µ–∫—É—â–∏–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è: {amount:,.2f} —Ä—É–±.",
            reply_markup=get_main_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250000 –∏–ª–∏ 250000.50")


# ==================== –î–û–°–†–û–ß–ù–û–ï –ü–û–ì–ê–®–ï–ù–ò–ï –ö–†–ï–î–ò–¢–û–í ====================

async def handle_early_payment(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    credits = db.get_user_credits(message.from_user.id)
    
    if not credits:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    keyboard = []
    for credit in credits:
        keyboard.append([InlineKeyboardButton(
            text=f"{credit['display_name']} ({credit['remaining_debt']:.2f} ‚ÇΩ)",
            callback_data=f"early_credit_{credit['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditStates.selecting_credit_for_early)


async def process_early_credit_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    credit_id = int(callback.data.split("_")[2])
    credit = db.get_credit_by_id(credit_id)
    await state.update_data(credit_id=credit_id)
    
    await callback.message.delete()
    await callback.message.answer(
        f"–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞:\n"
        f"üè¶ {credit['display_name']}\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {credit['remaining_debt']:,.2f} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreditStates.entering_early_amount)


async def process_early_payment_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    try:
        amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        credit = db.get_credit_by_id(data['credit_id'])
        
        if amount > credit['remaining_debt']:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ ({credit['remaining_debt']:,.2f} —Ä—É–±.)!\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –±–æ–ª–µ–µ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞:"
            )
            return
        
        await state.update_data(early_amount=amount)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
        keyboard = []
        
        if amount >= credit['remaining_debt']:
            # –ü–æ–ª–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
            keyboard.append([InlineKeyboardButton(
                text="‚úÖ –ü–æ–ª–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ",
                callback_data="early_type_full"
            )])
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
            if credit['has_early_partial_period']:
                keyboard.append([InlineKeyboardButton(
                    text="üìÖ –° —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞",
                    callback_data="early_type_reduce_period"
                )])
            if credit['has_early_partial_payment']:
                keyboard.append([InlineKeyboardButton(
                    text="üí∞ –° —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞",
                    callback_data="early_type_reduce_payment"
                )])
        
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        if len(keyboard) == 1:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –∫—Ä–µ–¥–∏—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ.\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∞'",
                reply_markup=get_credit_menu_keyboard()
            )
            await state.clear()
            return
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CreditStates.selecting_early_type)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000 –∏–ª–∏ 50000.50")


async def process_early_payment_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    data = await state.get_data()
    credit_id = data['credit_id']
    early_amount = data['early_amount']
    early_type = callback.data.split("_")[-1]
    
    if early_type == "full":
        payment_type = "early_full"
    elif early_type == "period":
        payment_type = "early_partial_period"
    else:
        payment_type = "early_partial_payment"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    credit = db.get_credit_by_id(credit_id)
    
    if payment_type == "early_full":
        db.add_credit_payment(credit_id, credit['remaining_debt'], payment_type)
        result_text = f"üéâ –ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!\n\nüè¶ {credit['display_name']}"
    else:
        calculation = FinancialCalculator.calculate_effective_rate_with_early_payment(
            credit, early_amount, 
            'reduce_period' if payment_type == 'early_partial_period' else 'reduce_payment'
        )
        
        db.add_credit_payment(credit_id, early_amount, payment_type)
        
        if payment_type == 'early_partial_period':
            result_text = (
                f"‚úÖ –î–æ—Å—Ä–æ—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç!\n\n"
                f"üè¶ {credit['display_name']}\n"
                f"üí∞ –í–Ω–µ—Å–µ–Ω–æ: {early_amount:,.2f} —Ä—É–±.\n"
                f"üìä –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {calculation['new_debt']:,.2f} —Ä—É–±.\n"
                f"üìÖ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–∞: {calculation['saved_months']} –º–µ—Å.\n"
                f"üíµ –ü–ª–∞—Ç—ë–∂ –æ—Å—Ç–∞–ª—Å—è: {calculation['new_payment']:,.2f} —Ä—É–±.\n"
                f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è: {calculation['saved_amount']:,.2f} —Ä—É–±."
            )
        else:
            result_text = (
                f"‚úÖ –î–æ—Å—Ä–æ—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç!\n\n"
                f"üè¶ {credit['display_name']}\n"
                f"üí∞ –í–Ω–µ—Å–µ–Ω–æ: {early_amount:,.2f} —Ä—É–±.\n"
                f"üìä –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {calculation['new_debt']:,.2f} —Ä—É–±.\n"
                f"üíµ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂: {calculation['new_payment']:,.2f} —Ä—É–±.\n"
                f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è –∑–∞ —Å—Ä–æ–∫: {calculation['saved_amount']:,.2f} —Ä—É–±."
            )
    
    await callback.message.delete()
    await state.clear()
    await callback.message.answer(result_text, reply_markup=get_credit_menu_keyboard())


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –ö–†–ï–î–ò–¢–ê ====================

async def handle_credit_capabilities(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫—Ä–µ–¥–∏—Ç–∞"""
    credits = db.get_user_credits(message.from_user.id)
    
    if not credits:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    keyboard = []
    for credit in credits:
        keyboard.append([InlineKeyboardButton(
            text=credit['display_name'],
            callback_data=f"cap_credit_{credit['id']}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditStates.selecting_credit_for_capabilities)


async def process_capabilities_credit_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    credit_id = int(callback.data.split("_")[2])
    credit = db.get_credit_by_id(credit_id)
    await state.update_data(credit_id=credit_id)
    
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_full'] else '‚ùå'} –ü–æ–ª–Ω–æ–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ",
            callback_data=f"toggle_full"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_period'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞",
            callback_data=f"toggle_period"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_payment'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞",
            callback_data=f"toggle_payment"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_holidays'] else '‚ùå'} –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã",
            callback_data=f"toggle_holidays"
        )],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="cap_done")]
    ]
    
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫—Ä–µ–¥–∏—Ç–∞:\n"
        f"üè¶ {credit['display_name']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CreditStates.updating_capabilities)


async def process_capability_toggle(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫—Ä–µ–¥–∏—Ç–∞"""
    if callback.data == "cap_done":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=get_credit_menu_keyboard()
        )
        return
    
    data = await state.get_data()
    credit_id = data['credit_id']
    credit = db.get_credit_by_id(credit_id)
    
    toggle_type = callback.data.split("_")[1]
    
    if toggle_type == "full":
        db.update_credit_capabilities(credit_id, has_early_full=not credit['has_early_full'])
    elif toggle_type == "period":
        db.update_credit_capabilities(credit_id, has_early_partial_period=not credit['has_early_partial_period'])
    elif toggle_type == "payment":
        db.update_credit_capabilities(credit_id, has_early_partial_payment=not credit['has_early_partial_payment'])
    elif toggle_type == "holidays":
        db.update_credit_capabilities(credit_id, has_holidays=not credit['has_holidays'])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    credit = db.get_credit_by_id(credit_id)
    
    keyboard = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_full'] else '‚ùå'} –ü–æ–ª–Ω–æ–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ",
            callback_data=f"toggle_full"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_period'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞",
            callback_data=f"toggle_period"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_early_partial_payment'] else '‚ùå'} –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞",
            callback_data=f"toggle_payment"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if credit['has_holidays'] else '‚ùå'} –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã",
            callback_data=f"toggle_holidays"
        )],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="cap_done")]
    ]
    
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def cancel_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_menu_keyboard()
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–Æ–î–ñ–ï–¢–ê ====================

async def handle_create_budget(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    from datetime import date
    from dateutil.relativedelta import relativedelta
    
    current_date = date.today()
    months = []
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö 12 –º–µ—Å—è—Ü–µ–≤
    for i in range(12):
        target_date = current_date + relativedelta(months=i)
        months.append({
            'month': target_date.month,
            'year': target_date.year,
            'name': target_date.strftime('%B %Y')
        })
    
    keyboard = []
    for month_data in months[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6
        keyboard.append([InlineKeyboardButton(
            text=month_data['name'],
            callback_data=f"budget_month_{month_data['month']}_{month_data['year']}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚û°Ô∏è –ï—â—ë –º–µ—Å—è—Ü—ã", callback_data="budget_more_months")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(BudgetStates.selecting_month)


async def process_budget_month_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –±—é–¥–∂–µ—Ç–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_budget_menu_keyboard()
        )
        return
    
    if callback.data == "budget_more_months":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        from datetime import date
        from dateutil.relativedelta import relativedelta
        
        current_date = date.today()
        months = []
        
        for i in range(6, 12):
            target_date = current_date + relativedelta(months=i)
            months.append({
                'month': target_date.month,
                'year': target_date.year,
                'name': target_date.strftime('%B %Y')
            })
        
        keyboard = []
        for month_data in months:
            keyboard.append([InlineKeyboardButton(
                text=month_data['name'],
                callback_data=f"budget_month_{month_data['month']}_{month_data['year']}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="budget_back_months")])
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await callback.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        return
    
    parts = callback.data.split("_")
    month = int(parts[2])
    year = int(parts[3])
    
    await state.update_data(month=month, year=year)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
    credits = db.get_user_credits(callback.from_user.id)
    credit_expenses = FinancialCalculator.calculate_monthly_credit_expenses(credits, month, year)
    
    await state.update_data(credit_expenses=credit_expenses['total'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±—é–¥–∂–µ—Ç
    existing_budget = db.get_budget(callback.from_user.id, month, year)
    
    info_text = f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ {calendar.month_name[month]} {year}\n\n"
    
    if existing_budget:
        info_text += "‚ö†Ô∏è –ù–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –µ—Å—Ç—å –±—é–¥–∂–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å.\n\n"
    
    info_text += f"üí≥ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º: {credit_expenses['total']:,.2f} —Ä—É–±.\n"
    
    if credit_expenses['credits']:
        info_text += "\n–ö—Ä–µ–¥–∏—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n"
        for credit in credit_expenses['credits']:
            info_text += f"  ‚Ä¢ {credit['display_name']}: {credit['monthly_payment']:,.2f} —Ä—É–±.\n"
    
    info_text += "\n–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü (–≤ —Ä—É–±–ª—è—Ö):"
    
    await callback.message.delete()
    await callback.message.answer(info_text, reply_markup=get_cancel_keyboard())
    await state.set_state(BudgetStates.waiting_planned_income)


async def process_planned_income(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    try:
        planned_income = float(message.text.replace(",", "."))
        await state.update_data(planned_income=planned_income)
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–±–µ–∑ —É—á–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤) –≤ —Ä—É–±–ª—è—Ö:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ç.–¥.",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(BudgetStates.waiting_planned_expenses)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 75000")


async def process_planned_income(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    income_categories = db.get_user_categories(message.from_user.id, cat_type="income")
    
    if not income_categories:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'",
            reply_markup=get_budget_menu_keyboard()
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
    suggestions = db.suggest_budget_categories(message.from_user.id, lookback_months=3)
    
    await state.update_data(income_categories_dict={}, income_suggestions=suggestions['income'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await show_income_category_selection(message, state, income_categories, suggestions['income'])


async def show_income_category_selection(message: types.Message, state: FSMContext, 
                                        categories: list, suggestions: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    added_cats = data.get('income_categories_dict', {})
    
    keyboard = []
    
    text = "üí∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±—é–¥–∂–µ—Ç:\n\n"
    
    for cat in categories:
        cat_id = cat['id']
        cat_name = cat['name']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if str(cat_id) in added_cats:
            amount = added_cats[str(cat_id)]
            text += f"‚úÖ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if cat_id in suggestions:
                suggested = suggestions[cat_id]
                button_text = f"‚ûï {cat_name} (–ø—Ä–µ–¥–ª.: {suggested:,.0f} —Ä—É–±.)"
            else:
                button_text = f"‚ûï {cat_name}"
            
            keyboard.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"budget_add_income_{cat_id}"
            )])
    
    if added_cats:
        total = sum(added_cats.values())
        text += f"\nüíµ –ò—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total:,.2f} —Ä—É–±.\n\n"
    
    keyboard.append([InlineKeyboardButton(
        text="‚úÖ –î–∞–ª–µ–µ –∫ —Ä–∞—Å—Ö–æ–¥–∞–º" if added_cats else "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ—Ö–æ–¥—ã",
        callback_data="budget_income_done"
    )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(BudgetStates.selecting_income_categories)


async def process_income_category_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_budget_menu_keyboard())
        return
    
    if callback.data == "budget_income_done":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—Ö–æ–¥–∞–º
        await callback.message.delete()
        
        expense_categories = db.get_user_categories(callback.from_user.id, cat_type="expense")
        
        if not expense_categories:
            await callback.message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'",
                reply_markup=get_budget_menu_keyboard()
            )
            await state.clear()
            return
        
        data = await state.get_data()
        suggestions = db.suggest_budget_categories(callback.from_user.id, lookback_months=3)
        await state.update_data(expense_categories_dict={}, expense_suggestions=suggestions['expense'])
        
        await show_expense_category_selection(callback.message, state, expense_categories, suggestions['expense'])
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = int(callback.data.split("_")[-1])
    
    await state.update_data(selected_income_category=category_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    data = await state.get_data()
    suggestions = data.get('income_suggestions', {})
    
    prompt_text = "–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):"
    
    if category_id in suggestions:
        suggested = suggestions[category_id]
        prompt_text = f"–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):\n\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏: {suggested:,.2f} —Ä—É–±."
    
    await callback.message.edit_text(
        prompt_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await state.set_state(BudgetStates.waiting_income_category_amount)


async def process_income_category_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        
        data = await state.get_data()
        category_id = data['selected_income_category']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        income_cats = data.get('income_categories_dict', {})
        income_cats[str(category_id)] = amount
        
        await state.update_data(income_categories_dict=income_cats)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        income_categories = db.get_user_categories(message.from_user.id, cat_type="income")
        suggestions = data.get('income_suggestions', {})
        
        await show_income_category_selection(message, state, income_categories, suggestions)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 75000")


async def show_expense_category_selection(message: types.Message, state: FSMContext,
                                         categories: list, suggestions: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    added_cats = data.get('expense_categories_dict', {})
    
    keyboard = []
    
    text = "üõí –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±—é–¥–∂–µ—Ç:\n\n"
    
    for cat in categories:
        cat_id = cat['id']
        cat_name = cat['name']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if str(cat_id) in added_cats:
            amount = added_cats[str(cat_id)]
            text += f"‚úÖ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if cat_id in suggestions:
                suggested = suggestions[cat_id]
                button_text = f"‚ûï {cat_name} (–ø—Ä–µ–¥–ª.: {suggested:,.0f} —Ä—É–±.)"
            else:
                button_text = f"‚ûï {cat_name}"
            
            keyboard.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"budget_add_expense_{cat_id}"
            )])
    
    if added_cats:
        total = sum(added_cats.values())
        text += f"\nüí≥ –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total:,.2f} —Ä—É–±.\n\n"
    
    data_income = data.get('income_categories_dict', {})
    if data_income:
        total_income = sum(data_income.values())
        total_expense = sum(added_cats.values()) if added_cats else 0
        credit_exp = data.get('credit_expenses', 0)
        balance = total_income - total_expense - credit_exp
        balance_emoji = "‚úÖ" if balance >= 0 else "‚ö†Ô∏è"
        
        text += f"{balance_emoji} –û—Å—Ç–∞—Ç–æ–∫: {balance:,.2f} —Ä—É–±.\n\n"
    
    keyboard.append([InlineKeyboardButton(
        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞" if added_cats else "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã",
        callback_data="budget_expense_done"
    )])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(BudgetStates.selecting_expense_categories)


async def process_expense_category_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        await state.clear()
        await callback.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_budget_menu_keyboard())
        return
    
    if callback.data == "budget_expense_done":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
        await callback.message.delete()
        await finalize_budget_creation(callback.message, state, callback.from_user.id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = int(callback.data.split("_")[-1])
    
    await state.update_data(selected_expense_category=category_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    data = await state.get_data()
    suggestions = data.get('expense_suggestions', {})
    
    prompt_text = "–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):"
    
    if category_id in suggestions:
        suggested = suggestions[category_id]
        prompt_text = f"–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):\n\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏: {suggested:,.2f} —Ä—É–±."
    
    await callback.message.edit_text(
        prompt_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await state.set_state(BudgetStates.waiting_expense_category_amount)


async def process_expense_category_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        
        data = await state.get_data()
        category_id = data['selected_expense_category']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        expense_cats = data.get('expense_categories_dict', {})
        expense_cats[str(category_id)] = amount
        
        await state.update_data(expense_categories_dict=expense_cats)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        expense_categories = db.get_user_categories(message.from_user.id, cat_type="expense")
        suggestions = data.get('expense_suggestions', {})
        
        await show_expense_category_selection(message, state, expense_categories, suggestions)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15000")


async def finalize_budget_creation(message: types.Message, state: FSMContext, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    data = await state.get_data()
    
    income_cats = data.get('income_categories_dict', {})
    expense_cats = data.get('expense_categories_dict', {})
    
    income_cats_int = {int(k): v for k, v in income_cats.items()}
    expense_cats_int = {int(k): v for k, v in expense_cats.items()}
    
    credit_expenses_total = db.get_credit_expenses_for_budget(user_id)
    
    budget_id = db.create_or_update_budget(
        user_id=user_id,
        month=data['month'],
        year=data['year'],
        income_categories=income_cats_int,
        expense_categories=expense_cats_int,
        credit_expenses=credit_expenses_total
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    total_income = sum(income_cats.values())
    total_expenses = sum(expense_cats.values())
    credit_exp = data.get('credit_expenses', 0)
    total_all_expenses = total_expenses + credit_exp
    balance = total_income - total_all_expenses
    balance_emoji = "‚úÖ" if balance >= 0 else "‚ùå"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    all_cats = db.get_user_categories(user_id)
    cat_names = {c['id']: c['name'] for c in all_cats}
    
    result_text = f"‚úÖ –ë—é–¥–∂–µ—Ç –Ω–∞ {calendar.month_name[data['month']]} {data['year']} —Å–æ–∑–¥–∞–Ω!\n\n"
    
    if income_cats:
        result_text += "üí∞ –î–æ—Ö–æ–¥—ã:\n"
        for cat_id, amount in income_cats.items():
            cat_name = cat_names.get(int(cat_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            result_text += f"  ‚Ä¢ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
        result_text += f"  üìä –ò–¢–û–ì–û –¥–æ—Ö–æ–¥–æ–≤: {total_income:,.2f} —Ä—É–±.\n\n"
    
    if expense_cats or credit_exp > 0:
        result_text += "üõí –†–∞—Å—Ö–æ–¥—ã:\n"
        for cat_id, amount in expense_cats.items():
            cat_name = cat_names.get(int(cat_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            result_text += f"  ‚Ä¢ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
        if credit_exp > 0:
            result_text += f"  ‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {credit_exp:,.2f} —Ä—É–±.\n"
        result_text += f"  üìä –ò–¢–û–ì–û —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_all_expenses:,.2f} —Ä—É–±.\n\n"
    
    result_text += f"{balance_emoji} –ë–∞–ª–∞–Ω—Å: {balance:,.2f} —Ä—É–±."
    
    if balance < 0:
        result_text += "\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –±—é–¥–∂–µ—Ç."
    
    await state.clear()
    await message.answer(result_text, reply_markup=get_budget_menu_keyboard())


# ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================

async def show_analytics_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="üìà –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏"), KeyboardButton(text="üíπ –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞")],
            [KeyboardButton(text="ü•ß –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"), KeyboardButton(text="üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç - –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n"
        "‚Ä¢ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ - –∫–æ–º–ø–ª–µ–∫—Ç –∏–∑ 6+ –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞ - –¥–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ - —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ - –ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è",
        reply_markup=keyboard
    )


async def generate_detailed_analytics(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç"""
    from analytics import FinancialAnalytics
    from database import Database
    
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã... –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        db = Database()
        analytics = FinancialAnalytics(db)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = analytics.generate_comprehensive_report(message.from_user.id, period_days=30)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        max_length = 4000
        if len(report) > max_length:
            parts = []
            current_part = ""
            
            for line in report.split('\n'):
                if len(current_part) + len(line) + 1 > max_length:
                    parts.append(current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            for i, part in enumerate(parts):
                await message.answer(part)
                if i < len(parts) - 1:
                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        else:
            await message.answer(report)
        
        await message.answer(
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.",
            reply_markup=get_analytics_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error generating analytics: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def generate_all_charts(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
    from visualization import ChartGenerator
    from database import Database
    
    await message.answer("üìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫–∏... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
    
    try:
        db = Database()
        chart_gen = ChartGenerator()
        
        charts = chart_gen.generate_full_financial_dashboard(message.from_user.id, db)
        
        if charts:
            await message.answer(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(charts)} –≥—Ä–∞—Ñ–∏–∫–æ–≤!")
            
            for i, chart_path in enumerate(charts, 1):
                photo = types.FSInputFile(chart_path)
                await message.answer_photo(
                    photo=photo,
                    caption=f"–ì—Ä–∞—Ñ–∏–∫ {i} –∏–∑ {len(charts)}"
                )
                await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            
            await message.answer(
                "üìä –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
                reply_markup=get_analytics_keyboard()
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥—Ä—É–≥—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            )
            
    except Exception as e:
        logger.error(f"Error generating charts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.")


def get_analytics_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="üìà –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏"), KeyboardButton(text="üíπ –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞")],
            [KeyboardButton(text="ü•ß –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"), KeyboardButton(text="üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


async def show_user_budgets(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –±—é–¥–∂–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    budgets = db.get_user_budgets(message.from_user.id)
    
    if not budgets:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç'",
            reply_markup=get_budget_menu_keyboard()
        )
        return
    
    text = "üìã –í–∞—à–∏ –±—é–¥–∂–µ—Ç—ã:\n\n"
    
    for i, budget in enumerate(budgets, 1):
        total_expenses = budget['planned_expenses'] + budget['credit_expenses']
        balance = budget['planned_income'] - total_expenses
        balance_emoji = "‚úÖ" if balance >= 0 else "‚ùå"
        
        text += f"{i}. {calendar.month_name[budget['month']]} {budget['year']}\n"
        text += f"   üí∞ –î–æ—Ö–æ–¥: {budget['planned_income']:,.0f} —Ä—É–±.\n"
        text += f"   üõí –†–∞—Å—Ö–æ–¥: {total_expenses:,.0f} —Ä—É–±.\n"
        text += f"   {balance_emoji} –ë–∞–ª–∞–Ω—Å: {balance:,.0f} —Ä—É–±.\n\n"
    
    keyboard = []
    for budget in budgets[:10]:
        month_name = calendar.month_name[budget['month']]
        keyboard.append([InlineKeyboardButton(
            text=f"üìä {month_name} {budget['year']}",
            callback_data=f"view_budget_{budget['id']}"
        )])
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def show_budget_forecast(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"""
    forecast = FinancialCalculator.generate_budget_forecast(
        message.from_user.id, db, months_ahead=6
    )
    
    text = "üìä –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤\n\n"
    
    for period in forecast:
        status = "‚úÖ" if period['has_budget'] else "‚ûñ"
        balance_emoji = "‚úÖ" if period['balance'] >= 0 else "‚ùå"
        
        text += f"{status} {period['month_name']}\n"
        
        if period['has_budget']:
            text += f"   üí∞ –î–æ—Ö–æ–¥: {period['planned_income']:,.2f} —Ä—É–±.\n"
            text += f"   üìä –†–∞—Å—Ö–æ–¥—ã: {period['total_expenses']:,.2f} —Ä—É–±.\n"
            text += f"     ‚îú‚îÄ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ: {period['planned_expenses']:,.2f} —Ä—É–±.\n"
            text += f"     ‚îî‚îÄ –ö—Ä–µ–¥–∏—Ç—ã: {period['credit_expenses']:,.2f} —Ä—É–±.\n"
            text += f"   {balance_emoji} –ë–∞–ª–∞–Ω—Å: {period['balance']:,.2f} —Ä—É–±.\n"
        else:
            text += f"   üí≥ –ö—Ä–µ–¥–∏—Ç—ã: {period['credit_expenses']:,.2f} —Ä—É–±.\n"
            if period['credit_details']:
                for credit in period['credit_details']:
                    text += f"     ‚Ä¢ {credit['display_name']}: {credit['monthly_payment']:,.2f} —Ä—É–±.\n"
            text += f"   ‚ö†Ô∏è –ë—é–¥–∂–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω\n"
        
        text += "\n"
    
    await message.answer(text, reply_markup=get_budget_menu_keyboard())


async def view_budget_details(callback: types.CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±—é–¥–∂–µ—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    budget_id = int(callback.data.split("_")[2])
    
    conn = sqlite3.connect('financial_bot.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM budget_plans WHERE id = ?", (budget_id,))
    budget = cursor.fetchone()
    conn.close()
    
    if not budget:
        await callback.answer("–ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    budget = dict(budget)
    user_id = budget['user_id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–º–µ–Ω–∞–º–∏
    import json
    income_cats = json.loads(budget['income_categories']) if budget.get('income_categories') else {}
    expense_cats = json.loads(budget['expense_categories']) if budget.get('expense_categories') else {}
    
    all_cats = db.get_user_categories(user_id)
    cat_names = {c['id']: c['name'] for c in all_cats}
    
    total_expenses = budget['planned_expenses'] + budget['credit_expenses']
    balance = budget['planned_income'] - total_expenses
    balance_emoji = "‚úÖ" if balance >= 0 else "‚ùå"
    
    text = f"üìä –ë—é–¥–∂–µ—Ç –Ω–∞ {calendar.month_name[budget['month']]} {budget['year']}\n\n"
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–æ–≤
    if income_cats:
        text += "üí∞ –î–æ—Ö–æ–¥—ã:\n"
        for cat_id_str, amount in income_cats.items():
            cat_name = cat_names.get(int(cat_id_str), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += f"  ‚Ä¢ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
        text += f"  üìä –ò–¢–û–ì–û: {budget['planned_income']:,.2f} —Ä—É–±.\n\n"
    else:
        text += f"üí∞ –î–æ—Ö–æ–¥—ã: {budget['planned_income']:,.2f} —Ä—É–±.\n\n"
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    text += "üõí –†–∞—Å—Ö–æ–¥—ã:\n"
    if expense_cats:
        for cat_id_str, amount in expense_cats.items():
            cat_name = cat_names.get(int(cat_id_str), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += f"  ‚Ä¢ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
    if budget['credit_expenses'] > 0:
        text += f"  ‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {budget['credit_expenses']:,.2f} —Ä—É–±.\n"
    text += f"  üìä –ò–¢–û–ì–û: {total_expenses:,.2f} —Ä—É–±.\n\n"
    
    text += f"{balance_emoji} –ë–∞–ª–∞–Ω—Å: {balance:,.2f} —Ä—É–±."
    
    if budget.get('notes'):
        text += f"\n\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {budget['notes']}"
    
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"edit_budget_cat_{budget_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data=f"delete_budget_{budget_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_budgets")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def edit_budget_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    budget_id = int(callback.data.split("_")[2])
    
    conn = db.get_connection()
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM budget_plans WHERE id = ?", (budget_id,))
    budget = cursor.fetchone()
    conn.close()
    
    if not budget:
        await callback.answer("–ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    budget = dict(budget)
    await state.update_data(
        budget_id=budget_id,
        month=budget['month'],
        year=budget['year'],
        credit_expenses=budget['credit_expenses']
    )
    
    await callback.message.delete()
    await callback.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ {calendar.month_name[budget['month']]} {budget['year']}\n\n"
        f"–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥: {budget['planned_income']:,.2f} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –¥–æ—Ö–æ–¥ (–∏–ª–∏ 0 —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BudgetStates.waiting_planned_income)


async def delete_budget_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞"""
    budget_id = int(callback.data.split("_")[2])
    
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{budget_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±—é–¥–∂–µ—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def confirm_delete_budget(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    if callback.data == "cancel":
        await callback.message.delete()
        return
    
    budget_id = int(callback.data.split("_")[2])
    
    if db.delete_budget(budget_id):
        await callback.message.edit_text("‚úÖ –ë—é–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        await asyncio.sleep(2)
        await callback.message.delete()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


# –û–±—ë—Ä—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–∞
async def start_create_budget(message: types.Message, state: FSMContext):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
    return await handle_create_budget(message, state)


async def start_show_budgets(message: types.Message):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –±—é–¥–∂–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
    return await show_user_budgets(message)


async def start_budget_forecast(message: types.Message):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
    return await show_budget_forecast(message)

from utils import NumberFormatter  # –∏–º–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω

# —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥
async def handle_delete_last_income(message: types.Message):
    user_id = message.from_user.id
    last = db.get_last_income(user_id)
    if not last:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤.")
        return
    ok = db.delete_income(user_id, last['id'])
    if ok:
        await message.answer(
            f"‚úÖ –£–¥–∞–ª—ë–Ω –¥–æ—Ö–æ–¥ ID {last['id']} –Ω–∞ —Å—É–º–º—É {NumberFormatter.format_money(last['amount'])} –æ—Ç {last['date']}"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")

# —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥
async def handle_delete_last_expense(message: types.Message):
    user_id = message.from_user.id
    last = db.get_last_expense(user_id)
    if not last:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return
    ok = db.delete_expense(user_id, last['id'])
    if ok:
        await message.answer(
            f"‚úÖ –£–¥–∞–ª—ë–Ω —Ä–∞—Å—Ö–æ–¥ ID {last['id']} –Ω–∞ —Å—É–º–º—É {NumberFormatter.format_money(last['amount'])} –æ—Ç {last['date']}"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")

# —É–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥ –ø–æ ID (–ø–æ–ø—Ä–æ—Å–∏—Ç ID –∏ –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π)
async def handle_delete_income_by_id(message: types.Message, state: FSMContext):
    recents = db.get_user_incomes(message.from_user.id)[:10]
    if recents:
        lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã:"]
        for r in recents:
            lines.append(
                f"ID {r['id']}: {NumberFormatter.format_money(r['amount'])} ‚Äî {r['date']} ‚Äî {r['description'] or '‚Äî'}"
            )
        await message.answer("\n".join(lines))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –¥–æ—Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(IncomeStates.waiting_delete_id)

# —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –ø–æ ID (–ø–æ–ø—Ä–æ—Å–∏—Ç ID –∏ –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π)
async def handle_delete_expense_by_id(message: types.Message, state: FSMContext):
    recents = db.get_user_expenses(message.from_user.id)[:10]
    if recents:
        lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:"]
        for r in recents:
            lines.append(
                f"ID {r['id']}: {NumberFormatter.format_money(r['amount'])} ‚Äî {r['date']} ‚Äî {r['description'] or '‚Äî'}"
            )
        await message.answer("\n".join(lines))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(ExpenseStates.waiting_delete_id)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
@router.message(StateFilter(IncomeStates.waiting_delete_id))
async def process_delete_income_id(message: types.Message, state: FSMContext):
    try:
        income_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ID.")
        return
    ok = db.delete_income(message.from_user.id, income_id)
    await state.clear()
    await message.answer("‚úÖ –î–æ—Ö–æ–¥ —É–¥–∞–ª—ë–Ω." if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
@router.message(StateFilter(ExpenseStates.waiting_delete_id))
async def process_delete_expense_id(message: types.Message, state: FSMContext):
    try:
        expense_id = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ID.")
        return
    ok = db.delete_expense(message.from_user.id, expense_id)
    await state.clear()
    await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª—ë–Ω." if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")

async def edit_budget_category_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—é–¥–∂–µ—Ç–∞"""
    budget_id = int(callback.data.split("_")[-1])
    
    conn = sqlite3.connect('financial_bot.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM budget_plans WHERE id = ?", (budget_id,))
    budget = cursor.fetchone()
    conn.close()
    
    if not budget:
        await callback.answer("–ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    budget = dict(budget)
    user_id = budget['user_id']
    
    import json
    income_cats = json.loads(budget['income_categories']) if budget.get('income_categories') else {}
    expense_cats = json.loads(budget['expense_categories']) if budget.get('expense_categories') else {}
    
    all_cats = db.get_user_categories(user_id)
    cat_names = {c['id']: c['name'] for c in all_cats}
    
    keyboard = []
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\nüí∞ –î–æ—Ö–æ–¥—ã:\n"
    
    for cat_id_str, amount in income_cats.items():
        cat_id = int(cat_id_str)
        cat_name = cat_names.get(cat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        text += f"  ‚Ä¢ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
        keyboard.append([InlineKeyboardButton(
            text=f"‚úèÔ∏è {cat_name} ({amount:,.0f} —Ä—É–±.)",
            callback_data=f"editcat_income_{budget_id}_{cat_id}"
        )])
    
    text += "\nüõí –†–∞—Å—Ö–æ–¥—ã:\n"
    
    for cat_id_str, amount in expense_cats.items():
        cat_id = int(cat_id_str)
        cat_name = cat_names.get(cat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        text += f"  ‚Ä¢ {cat_name}: {amount:,.2f} —Ä—É–±.\n"
        keyboard.append([InlineKeyboardButton(
            text=f"‚úèÔ∏è {cat_name} ({amount:,.0f} —Ä—É–±.)",
            callback_data=f"editcat_expense_{budget_id}_{cat_id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_budget_{budget_id}")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def edit_specific_category(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    parts = callback.data.split("_")
    cat_type = parts[1]
    budget_id = int(parts[2])
    category_id = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_cats = db.get_user_categories(callback.from_user.id)
    cat_name = next((c['name'] for c in all_cats if c['id'] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
    
    await state.update_data(
        edit_budget_id=budget_id,
        edit_category_id=category_id,
        edit_category_type=cat_type
    )
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_budget_{budget_id}")]
        ])
    )
    
    await state.set_state(BudgetStates.waiting_edited_category_amount)


async def process_edited_category_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        new_amount = float(message.text.replace(",", "."))
        
        data = await state.get_data()
        budget_id = data['edit_budget_id']
        category_id = data['edit_category_id']
        cat_type = data['edit_category_type']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        success = db.update_budget_category(budget_id, cat_type, category_id, new_amount)
        
        if success:
            await message.answer(
                f"‚úÖ –°—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_amount:,.2f} —Ä—É–±.",
                reply_markup=get_budget_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏",
                reply_markup=get_budget_menu_keyboard()
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000")
